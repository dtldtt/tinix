
console.o:     file format elf32-i386


Disassembly of section .text:

00000000 <move_cursor>:
static uint8_t hex_set[]="0123456789ABCDEF";
static uint8_t dec_set[]="0123456789";

//移动光标
static void move_cursor()
{
   0:	55                   	push   %ebp
   1:	89 e5                	mov    %esp,%ebp
   3:	83 ec 18             	sub    $0x18,%esp
	//屏幕宽80高25,80*25
	uint16_t cursorLocation=cursor_y*80+cursor_x;
   6:	0f b6 05 01 00 00 00 	movzbl 0x1,%eax
   d:	0f b6 d0             	movzbl %al,%edx
  10:	89 d0                	mov    %edx,%eax
  12:	c1 e0 02             	shl    $0x2,%eax
  15:	01 d0                	add    %edx,%eax
  17:	c1 e0 04             	shl    $0x4,%eax
  1a:	89 c2                	mov    %eax,%edx
  1c:	0f b6 05 00 00 00 00 	movzbl 0x0,%eax
  23:	0f b6 c0             	movzbl %al,%eax
  26:	01 d0                	add    %edx,%eax
  28:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
	** 向它写入一个值来指定内部的某个寄存器
	** 光标寄存器的索引值分别是14和15,
	** 分别存储光标位置的高8位和低8位
	** 可以通过端口0x3d5对其内容进行读写
	*/
	outb(0x3d4,14);					//准备设置光标的高8位
  2c:	83 ec 08             	sub    $0x8,%esp
  2f:	6a 0e                	push   $0xe
  31:	68 d4 03 00 00       	push   $0x3d4
  36:	e8 fc ff ff ff       	call   37 <move_cursor+0x37>
  3b:	83 c4 10             	add    $0x10,%esp
	outb(0x3d5,cursorLocation>>8);	//设置光标高8位
  3e:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
  42:	66 c1 e8 08          	shr    $0x8,%ax
  46:	0f b6 c0             	movzbl %al,%eax
  49:	83 ec 08             	sub    $0x8,%esp
  4c:	50                   	push   %eax
  4d:	68 d5 03 00 00       	push   $0x3d5
  52:	e8 fc ff ff ff       	call   53 <move_cursor+0x53>
  57:	83 c4 10             	add    $0x10,%esp
	outb(0x3d4,15);					//准备设置光标的低8位
  5a:	83 ec 08             	sub    $0x8,%esp
  5d:	6a 0f                	push   $0xf
  5f:	68 d4 03 00 00       	push   $0x3d4
  64:	e8 fc ff ff ff       	call   65 <move_cursor+0x65>
  69:	83 c4 10             	add    $0x10,%esp
	outb(0x3d5,cursorLocation);		//设置光标低8位
  6c:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
  70:	0f b6 c0             	movzbl %al,%eax
  73:	83 ec 08             	sub    $0x8,%esp
  76:	50                   	push   %eax
  77:	68 d5 03 00 00       	push   $0x3d5
  7c:	e8 fc ff ff ff       	call   7d <move_cursor+0x7d>
  81:	83 c4 10             	add    $0x10,%esp
}
  84:	90                   	nop
  85:	c9                   	leave  
  86:	c3                   	ret    

00000087 <console_clear>:

//清屏
void console_clear()
{
  87:	55                   	push   %ebp
  88:	89 e5                	mov    %esp,%ebp
  8a:	83 ec 18             	sub    $0x18,%esp
	uint8_t attribute_byte=0x07; //黑底白字
  8d:	c6 45 f3 07          	movb   $0x7,-0xd(%ebp)
	uint16_t blank=0x20 | (attribute_byte << 8); //一个字，表示黑底白字的空格，用来清屏
  91:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
  95:	c1 e0 08             	shl    $0x8,%eax
  98:	83 c8 20             	or     $0x20,%eax
  9b:	66 89 45 f0          	mov    %ax,-0x10(%ebp)
	
	int i;
	for (i=0;i<80*25;i++)
  9f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  a6:	eb 17                	jmp    bf <console_clear+0x38>
	{
		video_memory[i]=blank;
  a8:	a1 00 00 00 00       	mov    0x0,%eax
  ad:	8b 55 f4             	mov    -0xc(%ebp),%edx
  b0:	01 d2                	add    %edx,%edx
  b2:	01 c2                	add    %eax,%edx
  b4:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
  b8:	66 89 02             	mov    %ax,(%edx)
{
	uint8_t attribute_byte=0x07; //黑底白字
	uint16_t blank=0x20 | (attribute_byte << 8); //一个字，表示黑底白字的空格，用来清屏
	
	int i;
	for (i=0;i<80*25;i++)
  bb:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
  bf:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
  c6:	7e e0                	jle    a8 <console_clear+0x21>
	{
		video_memory[i]=blank;
	}

	cursor_x=0;
  c8:	c6 05 00 00 00 00 00 	movb   $0x0,0x0
	cursor_y=0;
  cf:	c6 05 01 00 00 00 00 	movb   $0x0,0x1
	move_cursor();
  d6:	e8 25 ff ff ff       	call   0 <move_cursor>
}
  db:	90                   	nop
  dc:	c9                   	leave  
  dd:	c3                   	ret    

000000de <scroll>:

//滚屏
static void scroll()
{
  de:	55                   	push   %ebp
  df:	89 e5                	mov    %esp,%ebp
  e1:	83 ec 10             	sub    $0x10,%esp
	/* 滚屏很简单，把前24行一次向前挪动一行
	** 最后一行用黑底白字的空格填充 */
	uint8_t attribute_byte=0x07;
  e4:	c6 45 fb 07          	movb   $0x7,-0x5(%ebp)
	uint16_t blank=0x20 | (attribute_byte << 8);
  e8:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
  ec:	c1 e0 08             	shl    $0x8,%eax
  ef:	83 c8 20             	or     $0x20,%eax
  f2:	66 89 45 f8          	mov    %ax,-0x8(%ebp)

	//cursor_y超过或者等于25时候需要滚屏
	if(cursor_y>=25)
  f6:	0f b6 05 01 00 00 00 	movzbl 0x1,%eax
  fd:	3c 18                	cmp    $0x18,%al
  ff:	76 67                	jbe    168 <scroll+0x8a>
	{
		int i;
		//除了第一行的每一行往前一行覆盖
		for (i=0;i<24*80;i++)
 101:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
 108:	eb 25                	jmp    12f <scroll+0x51>
		{
			video_memory[i]=video_memory[i+80];
 10a:	a1 00 00 00 00       	mov    0x0,%eax
 10f:	8b 55 fc             	mov    -0x4(%ebp),%edx
 112:	01 d2                	add    %edx,%edx
 114:	01 c2                	add    %eax,%edx
 116:	a1 00 00 00 00       	mov    0x0,%eax
 11b:	8b 4d fc             	mov    -0x4(%ebp),%ecx
 11e:	83 c1 50             	add    $0x50,%ecx
 121:	01 c9                	add    %ecx,%ecx
 123:	01 c8                	add    %ecx,%eax
 125:	0f b7 00             	movzwl (%eax),%eax
 128:	66 89 02             	mov    %ax,(%edx)
	//cursor_y超过或者等于25时候需要滚屏
	if(cursor_y>=25)
	{
		int i;
		//除了第一行的每一行往前一行覆盖
		for (i=0;i<24*80;i++)
 12b:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 12f:	81 7d fc 7f 07 00 00 	cmpl   $0x77f,-0x4(%ebp)
 136:	7e d2                	jle    10a <scroll+0x2c>
		{
			video_memory[i]=video_memory[i+80];
		}
		//最后一行填充
		for(i=24*80;i<25*80;i++)
 138:	c7 45 fc 80 07 00 00 	movl   $0x780,-0x4(%ebp)
 13f:	eb 17                	jmp    158 <scroll+0x7a>
		{
			video_memory[i]=blank;
 141:	a1 00 00 00 00       	mov    0x0,%eax
 146:	8b 55 fc             	mov    -0x4(%ebp),%edx
 149:	01 d2                	add    %edx,%edx
 14b:	01 c2                	add    %eax,%edx
 14d:	0f b7 45 f8          	movzwl -0x8(%ebp),%eax
 151:	66 89 02             	mov    %ax,(%edx)
		for (i=0;i<24*80;i++)
		{
			video_memory[i]=video_memory[i+80];
		}
		//最后一行填充
		for(i=24*80;i<25*80;i++)
 154:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 158:	81 7d fc cf 07 00 00 	cmpl   $0x7cf,-0x4(%ebp)
 15f:	7e e0                	jle    141 <scroll+0x63>
		{
			video_memory[i]=blank;
		}
		//重置cursor_y
		cursor_y=24;
 161:	c6 05 01 00 00 00 18 	movb   $0x18,0x1
	}
}
 168:	90                   	nop
 169:	c9                   	leave  
 16a:	c3                   	ret    

0000016b <console_putc_color>:

//显示字符
void console_putc_color(char c, real_color_t back,real_color_t fore)
{
 16b:	55                   	push   %ebp
 16c:	89 e5                	mov    %esp,%ebp
 16e:	83 ec 28             	sub    $0x28,%esp
 171:	8b 45 08             	mov    0x8(%ebp),%eax
 174:	88 45 e4             	mov    %al,-0x1c(%ebp)
	uint8_t back_color=(uint8_t)back;
 177:	8b 45 0c             	mov    0xc(%ebp),%eax
 17a:	88 45 f7             	mov    %al,-0x9(%ebp)
	uint8_t fore_color=(uint8_t)fore;
 17d:	8b 45 10             	mov    0x10(%ebp),%eax
 180:	88 45 f6             	mov    %al,-0xa(%ebp)

	uint8_t attribute_byte=(back_color << 4) | (fore_color & 0x0f);
 183:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
 187:	c1 e0 04             	shl    $0x4,%eax
 18a:	89 c2                	mov    %eax,%edx
 18c:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
 190:	83 e0 0f             	and    $0xf,%eax
 193:	09 d0                	or     %edx,%eax
 195:	88 45 f5             	mov    %al,-0xb(%ebp)
	uint16_t attribute = attribute_byte<<8;
 198:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
 19c:	c1 e0 08             	shl    $0x8,%eax
 19f:	66 89 45 f2          	mov    %ax,-0xe(%ebp)

	//0x08是退格键的ASCII码
	//0x09是TAB键的ASCII码
	if (c==0x08 && cursor_x)
 1a3:	80 7d e4 08          	cmpb   $0x8,-0x1c(%ebp)
 1a7:	75 1f                	jne    1c8 <console_putc_color+0x5d>
 1a9:	0f b6 05 00 00 00 00 	movzbl 0x0,%eax
 1b0:	84 c0                	test   %al,%al
 1b2:	74 14                	je     1c8 <console_putc_color+0x5d>
	{
		cursor_x--;
 1b4:	0f b6 05 00 00 00 00 	movzbl 0x0,%eax
 1bb:	83 e8 01             	sub    $0x1,%eax
 1be:	a2 00 00 00 00       	mov    %al,0x0
 1c3:	e9 96 00 00 00       	jmp    25e <console_putc_color+0xf3>
	}
	else if (c==0x09)
 1c8:	80 7d e4 09          	cmpb   $0x9,-0x1c(%ebp)
 1cc:	75 14                	jne    1e2 <console_putc_color+0x77>
	{
		cursor_x=(cursor_x+4) & ~(4-1);//这里设置tab长度为4，使其4对其
 1ce:	0f b6 05 00 00 00 00 	movzbl 0x0,%eax
 1d5:	83 c0 04             	add    $0x4,%eax
 1d8:	83 e0 fc             	and    $0xfffffffc,%eax
 1db:	a2 00 00 00 00       	mov    %al,0x0
 1e0:	eb 7c                	jmp    25e <console_putc_color+0xf3>
	}
	else if (c=='\r')
 1e2:	80 7d e4 0d          	cmpb   $0xd,-0x1c(%ebp)
 1e6:	75 09                	jne    1f1 <console_putc_color+0x86>
	{
		cursor_x=0;
 1e8:	c6 05 00 00 00 00 00 	movb   $0x0,0x0
 1ef:	eb 6d                	jmp    25e <console_putc_color+0xf3>
	}
	else if (c=='\n')
 1f1:	80 7d e4 0a          	cmpb   $0xa,-0x1c(%ebp)
 1f5:	75 18                	jne    20f <console_putc_color+0xa4>
	{
		cursor_x=0;
 1f7:	c6 05 00 00 00 00 00 	movb   $0x0,0x0
		cursor_y++;
 1fe:	0f b6 05 01 00 00 00 	movzbl 0x1,%eax
 205:	83 c0 01             	add    $0x1,%eax
 208:	a2 01 00 00 00       	mov    %al,0x1
 20d:	eb 4f                	jmp    25e <console_putc_color+0xf3>
	}
	else if (c>=' ')
 20f:	80 7d e4 1f          	cmpb   $0x1f,-0x1c(%ebp)
 213:	7e 49                	jle    25e <console_putc_color+0xf3>
	{
		video_memory[cursor_y*80+cursor_x] = c | attribute;
 215:	8b 0d 00 00 00 00    	mov    0x0,%ecx
 21b:	0f b6 05 01 00 00 00 	movzbl 0x1,%eax
 222:	0f b6 d0             	movzbl %al,%edx
 225:	89 d0                	mov    %edx,%eax
 227:	c1 e0 02             	shl    $0x2,%eax
 22a:	01 d0                	add    %edx,%eax
 22c:	c1 e0 04             	shl    $0x4,%eax
 22f:	89 c2                	mov    %eax,%edx
 231:	0f b6 05 00 00 00 00 	movzbl 0x0,%eax
 238:	0f b6 c0             	movzbl %al,%eax
 23b:	01 d0                	add    %edx,%eax
 23d:	01 c0                	add    %eax,%eax
 23f:	01 c8                	add    %ecx,%eax
 241:	66 0f be 4d e4       	movsbw -0x1c(%ebp),%cx
 246:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
 24a:	09 ca                	or     %ecx,%edx
 24c:	66 89 10             	mov    %dx,(%eax)
		cursor_x++;
 24f:	0f b6 05 00 00 00 00 	movzbl 0x0,%eax
 256:	83 c0 01             	add    $0x1,%eax
 259:	a2 00 00 00 00       	mov    %al,0x0
	}
	//如果显示到达行尾(x>=80)则自动换行
	if (cursor_x >= 80)
 25e:	0f b6 05 00 00 00 00 	movzbl 0x0,%eax
 265:	3c 4f                	cmp    $0x4f,%al
 267:	76 16                	jbe    27f <console_putc_color+0x114>
	{
		cursor_x=0;
 269:	c6 05 00 00 00 00 00 	movb   $0x0,0x0
		cursor_y++;
 270:	0f b6 05 01 00 00 00 	movzbl 0x1,%eax
 277:	83 c0 01             	add    $0x1,%eax
 27a:	a2 01 00 00 00       	mov    %al,0x1
	}
	//滚屏，需不需要留给函数自己判断
	scroll();
 27f:	e8 5a fe ff ff       	call   de <scroll>

	//移动光标
	move_cursor();
 284:	e8 77 fd ff ff       	call   0 <move_cursor>
}
 289:	90                   	nop
 28a:	c9                   	leave  
 28b:	c3                   	ret    

0000028c <console_write>:

void console_write(char *cstr)
{
 28c:	55                   	push   %ebp
 28d:	89 e5                	mov    %esp,%ebp
 28f:	83 ec 08             	sub    $0x8,%esp
	while(*cstr) 
 292:	eb 1f                	jmp    2b3 <console_write+0x27>
	{
		console_putc_color(*cstr++,rc_black,rc_white);
 294:	8b 45 08             	mov    0x8(%ebp),%eax
 297:	8d 50 01             	lea    0x1(%eax),%edx
 29a:	89 55 08             	mov    %edx,0x8(%ebp)
 29d:	0f b6 00             	movzbl (%eax),%eax
 2a0:	0f be c0             	movsbl %al,%eax
 2a3:	83 ec 04             	sub    $0x4,%esp
 2a6:	6a 0f                	push   $0xf
 2a8:	6a 00                	push   $0x0
 2aa:	50                   	push   %eax
 2ab:	e8 fc ff ff ff       	call   2ac <console_write+0x20>
 2b0:	83 c4 10             	add    $0x10,%esp
	move_cursor();
}

void console_write(char *cstr)
{
	while(*cstr) 
 2b3:	8b 45 08             	mov    0x8(%ebp),%eax
 2b6:	0f b6 00             	movzbl (%eax),%eax
 2b9:	84 c0                	test   %al,%al
 2bb:	75 d7                	jne    294 <console_write+0x8>
	{
		console_putc_color(*cstr++,rc_black,rc_white);
	}
}
 2bd:	90                   	nop
 2be:	c9                   	leave  
 2bf:	c3                   	ret    

000002c0 <console_write_color>:

void console_write_color(char *cstr,real_color_t back,real_color_t fore)
{
 2c0:	55                   	push   %ebp
 2c1:	89 e5                	mov    %esp,%ebp
 2c3:	83 ec 08             	sub    $0x8,%esp
	while(*cstr)
 2c6:	eb 21                	jmp    2e9 <console_write_color+0x29>
	{
		console_putc_color(*cstr++,back,fore);
 2c8:	8b 45 08             	mov    0x8(%ebp),%eax
 2cb:	8d 50 01             	lea    0x1(%eax),%edx
 2ce:	89 55 08             	mov    %edx,0x8(%ebp)
 2d1:	0f b6 00             	movzbl (%eax),%eax
 2d4:	0f be c0             	movsbl %al,%eax
 2d7:	83 ec 04             	sub    $0x4,%esp
 2da:	ff 75 10             	pushl  0x10(%ebp)
 2dd:	ff 75 0c             	pushl  0xc(%ebp)
 2e0:	50                   	push   %eax
 2e1:	e8 fc ff ff ff       	call   2e2 <console_write_color+0x22>
 2e6:	83 c4 10             	add    $0x10,%esp
	}
}

void console_write_color(char *cstr,real_color_t back,real_color_t fore)
{
	while(*cstr)
 2e9:	8b 45 08             	mov    0x8(%ebp),%eax
 2ec:	0f b6 00             	movzbl (%eax),%eax
 2ef:	84 c0                	test   %al,%al
 2f1:	75 d5                	jne    2c8 <console_write_color+0x8>
	{
		console_putc_color(*cstr++,back,fore);
	}
}
 2f3:	90                   	nop
 2f4:	c9                   	leave  
 2f5:	c3                   	ret    

000002f6 <console_write_hex>:

void console_write_hex(uint32_t n, real_color_t back,real_color_t fore)
{
 2f6:	55                   	push   %ebp
 2f7:	89 e5                	mov    %esp,%ebp
 2f9:	83 ec 28             	sub    $0x28,%esp
	//32位数用16进制输出最多8位
	char hex_header[]="0x"; //输出十六进制数的格式0x
 2fc:	66 c7 45 f1 30 78    	movw   $0x7830,-0xf(%ebp)
 302:	c6 45 f3 00          	movb   $0x0,-0xd(%ebp)
	char hex_digits[8];		//存放16进制数的每一位，地位在前，高位在后；
	char result[8];			//存放最终结果，高位在前，低位在后
	uint8_t num=0;			//表示该数有几位（16进制）
 306:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
	
	console_write_color(hex_header,back,fore);
 30a:	83 ec 04             	sub    $0x4,%esp
 30d:	ff 75 10             	pushl  0x10(%ebp)
 310:	ff 75 0c             	pushl  0xc(%ebp)
 313:	8d 45 f1             	lea    -0xf(%ebp),%eax
 316:	50                   	push   %eax
 317:	e8 fc ff ff ff       	call   318 <console_write_hex+0x22>
 31c:	83 c4 10             	add    $0x10,%esp

	if(n==0)				//如果是0直接输出0
 31f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
 323:	75 41                	jne    366 <console_write_hex+0x70>
	{
		console_putc_color('0',back,fore);
 325:	83 ec 04             	sub    $0x4,%esp
 328:	ff 75 10             	pushl  0x10(%ebp)
 32b:	ff 75 0c             	pushl  0xc(%ebp)
 32e:	6a 30                	push   $0x30
 330:	e8 fc ff ff ff       	call   331 <console_write_hex+0x3b>
 335:	83 c4 10             	add    $0x10,%esp
 338:	e9 8b 00 00 00       	jmp    3c8 <console_write_hex+0xd2>
		return;
	}

	while(n)				//循环，每次去除最低位放在hex_digits里边，并且让n除以16
	{
		char digit=n & (0xf);
 33d:	8b 45 08             	mov    0x8(%ebp),%eax
 340:	83 e0 0f             	and    $0xf,%eax
 343:	88 45 f4             	mov    %al,-0xc(%ebp)
		hex_digits[num++]=hex_set[digit];
 346:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
 34a:	8d 50 01             	lea    0x1(%eax),%edx
 34d:	88 55 f7             	mov    %dl,-0x9(%ebp)
 350:	0f b6 c0             	movzbl %al,%eax
 353:	0f be 55 f4          	movsbl -0xc(%ebp),%edx
 357:	0f b6 92 04 00 00 00 	movzbl 0x4(%edx),%edx
 35e:	88 54 05 e9          	mov    %dl,-0x17(%ebp,%eax,1)
		n=n>>4;
 362:	c1 6d 08 04          	shrl   $0x4,0x8(%ebp)
	{
		console_putc_color('0',back,fore);
		return;
	}

	while(n)				//循环，每次去除最低位放在hex_digits里边，并且让n除以16
 366:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
 36a:	75 d1                	jne    33d <console_write_hex+0x47>
		char digit=n & (0xf);
		hex_digits[num++]=hex_set[digit];
		n=n>>4;
	}
	uint8_t i,j;
	for(i=0,j=num-1;i<num;i++,j--)
 36c:	c6 45 f6 00          	movb   $0x0,-0xa(%ebp)
 370:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
 374:	83 e8 01             	sub    $0x1,%eax
 377:	88 45 f5             	mov    %al,-0xb(%ebp)
 37a:	eb 25                	jmp    3a1 <console_write_hex+0xab>
	{
		result[i]=hex_digits[j];
 37c:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
 380:	0f b6 55 f5          	movzbl -0xb(%ebp),%edx
 384:	0f b6 54 15 e9       	movzbl -0x17(%ebp,%edx,1),%edx
 389:	88 54 05 e1          	mov    %dl,-0x1f(%ebp,%eax,1)
		char digit=n & (0xf);
		hex_digits[num++]=hex_set[digit];
		n=n>>4;
	}
	uint8_t i,j;
	for(i=0,j=num-1;i<num;i++,j--)
 38d:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
 391:	83 c0 01             	add    $0x1,%eax
 394:	88 45 f6             	mov    %al,-0xa(%ebp)
 397:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
 39b:	83 e8 01             	sub    $0x1,%eax
 39e:	88 45 f5             	mov    %al,-0xb(%ebp)
 3a1:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
 3a5:	3a 45 f7             	cmp    -0x9(%ebp),%al
 3a8:	72 d2                	jb     37c <console_write_hex+0x86>
	{
		result[i]=hex_digits[j];
	}
	result[num]=0;
 3aa:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
 3ae:	c6 44 05 e1 00       	movb   $0x0,-0x1f(%ebp,%eax,1)
	console_write_color(result,back,fore);
 3b3:	83 ec 04             	sub    $0x4,%esp
 3b6:	ff 75 10             	pushl  0x10(%ebp)
 3b9:	ff 75 0c             	pushl  0xc(%ebp)
 3bc:	8d 45 e1             	lea    -0x1f(%ebp),%eax
 3bf:	50                   	push   %eax
 3c0:	e8 fc ff ff ff       	call   3c1 <console_write_hex+0xcb>
 3c5:	83 c4 10             	add    $0x10,%esp
}
 3c8:	c9                   	leave  
 3c9:	c3                   	ret    

000003ca <console_write_dec>:

void console_write_dec(uint32_t n, real_color_t back, real_color_t fore)
{
 3ca:	55                   	push   %ebp
 3cb:	89 e5                	mov    %esp,%ebp
 3cd:	83 ec 28             	sub    $0x28,%esp
	//32位数用10进制输出最多10位
	char dec_digits[10];		//存放10进制数的每一位，低位在前，高位在后；
	char result[10];			//存放最终结果，高位在前，低位在后
	uint8_t num=0;				//表示该数有几位（10进制）
 3d0:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)

	if(n==0)				//如果是0直接输出0
 3d4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
 3d8:	75 65                	jne    43f <console_write_dec+0x75>
	{
		console_putc_color('0',back,fore);
 3da:	83 ec 04             	sub    $0x4,%esp
 3dd:	ff 75 10             	pushl  0x10(%ebp)
 3e0:	ff 75 0c             	pushl  0xc(%ebp)
 3e3:	6a 30                	push   $0x30
 3e5:	e8 fc ff ff ff       	call   3e6 <console_write_dec+0x1c>
 3ea:	83 c4 10             	add    $0x10,%esp
 3ed:	e9 af 00 00 00       	jmp    4a1 <console_write_dec+0xd7>
		return;
	}

	while(n)				//循环，每次去除最低位放在dec_digits里边，并且让n除以10
	{
		char digit=n%10;
 3f2:	8b 4d 08             	mov    0x8(%ebp),%ecx
 3f5:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
 3fa:	89 c8                	mov    %ecx,%eax
 3fc:	f7 e2                	mul    %edx
 3fe:	c1 ea 03             	shr    $0x3,%edx
 401:	89 d0                	mov    %edx,%eax
 403:	c1 e0 02             	shl    $0x2,%eax
 406:	01 d0                	add    %edx,%eax
 408:	01 c0                	add    %eax,%eax
 40a:	29 c1                	sub    %eax,%ecx
 40c:	89 ca                	mov    %ecx,%edx
 40e:	88 55 f4             	mov    %dl,-0xc(%ebp)
		dec_digits[num++]=dec_set[digit];
 411:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
 415:	8d 50 01             	lea    0x1(%eax),%edx
 418:	88 55 f7             	mov    %dl,-0x9(%ebp)
 41b:	0f b6 c0             	movzbl %al,%eax
 41e:	0f be 55 f4          	movsbl -0xc(%ebp),%edx
 422:	0f b6 92 18 00 00 00 	movzbl 0x18(%edx),%edx
 429:	88 54 05 ea          	mov    %dl,-0x16(%ebp,%eax,1)
		n/=10;
 42d:	8b 45 08             	mov    0x8(%ebp),%eax
 430:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
 435:	f7 e2                	mul    %edx
 437:	89 d0                	mov    %edx,%eax
 439:	c1 e8 03             	shr    $0x3,%eax
 43c:	89 45 08             	mov    %eax,0x8(%ebp)
	{
		console_putc_color('0',back,fore);
		return;
	}

	while(n)				//循环，每次去除最低位放在dec_digits里边，并且让n除以10
 43f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
 443:	75 ad                	jne    3f2 <console_write_dec+0x28>
		char digit=n%10;
		dec_digits[num++]=dec_set[digit];
		n/=10;
	}
	uint8_t i,j;
	for(i=0,j=num-1;i<num;i++,j--)
 445:	c6 45 f6 00          	movb   $0x0,-0xa(%ebp)
 449:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
 44d:	83 e8 01             	sub    $0x1,%eax
 450:	88 45 f5             	mov    %al,-0xb(%ebp)
 453:	eb 25                	jmp    47a <console_write_dec+0xb0>
	{
		result[i]=dec_digits[j];
 455:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
 459:	0f b6 55 f5          	movzbl -0xb(%ebp),%edx
 45d:	0f b6 54 15 ea       	movzbl -0x16(%ebp,%edx,1),%edx
 462:	88 54 05 e0          	mov    %dl,-0x20(%ebp,%eax,1)
		char digit=n%10;
		dec_digits[num++]=dec_set[digit];
		n/=10;
	}
	uint8_t i,j;
	for(i=0,j=num-1;i<num;i++,j--)
 466:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
 46a:	83 c0 01             	add    $0x1,%eax
 46d:	88 45 f6             	mov    %al,-0xa(%ebp)
 470:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
 474:	83 e8 01             	sub    $0x1,%eax
 477:	88 45 f5             	mov    %al,-0xb(%ebp)
 47a:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
 47e:	3a 45 f7             	cmp    -0x9(%ebp),%al
 481:	72 d2                	jb     455 <console_write_dec+0x8b>
	{
		result[i]=dec_digits[j];
	}
	result[num]=0;
 483:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
 487:	c6 44 05 e0 00       	movb   $0x0,-0x20(%ebp,%eax,1)
	console_write_color(result,back,fore);
 48c:	83 ec 04             	sub    $0x4,%esp
 48f:	ff 75 10             	pushl  0x10(%ebp)
 492:	ff 75 0c             	pushl  0xc(%ebp)
 495:	8d 45 e0             	lea    -0x20(%ebp),%eax
 498:	50                   	push   %eax
 499:	e8 fc ff ff ff       	call   49a <console_write_dec+0xd0>
 49e:	83 c4 10             	add    $0x10,%esp
 4a1:	c9                   	leave  
 4a2:	c3                   	ret    

Disassembly of section .data:

00000000 <video_memory>:
static uint8_t hex_set[]="0123456789ABCDEF";
static uint8_t dec_set[]="0123456789";

//移动光标
static void move_cursor()
{
   0:	00 80 0b 00 30 31    	add    %al,0x3130000b(%eax)

00000004 <hex_set>:
   4:	30 31                	xor    %dh,(%ecx)
	//屏幕宽80高25,80*25
	uint16_t cursorLocation=cursor_y*80+cursor_x;
   6:	32 33                	xor    (%ebx),%dh
   8:	34 35                	xor    $0x35,%al
   a:	36 37                	ss aaa 
   c:	38 39                	cmp    %bh,(%ecx)
   e:	41                   	inc    %ecx
   f:	42                   	inc    %edx
  10:	43                   	inc    %ebx
  11:	44                   	inc    %esp
  12:	45                   	inc    %ebp
  13:	46                   	inc    %esi
  14:	00 00                	add    %al,(%eax)
	...

00000018 <dec_set>:
  18:	30 31                	xor    %dh,(%ecx)
  1a:	32 33                	xor    (%ebx),%dh
  1c:	34 35                	xor    $0x35,%al
  1e:	36 37                	ss aaa 
  20:	38 39                	cmp    %bh,(%ecx)
	...

Disassembly of section .bss:

00000000 <cursor_x>:
	...

00000001 <cursor_y>:
	...

Disassembly of section .stab:

00000000 <.stab>:
static uint8_t hex_set[]="0123456789ABCDEF";
static uint8_t dec_set[]="0123456789";

//移动光标
static void move_cursor()
{
   0:	01 00                	add    %eax,(%eax)
   2:	00 00                	add    %al,(%eax)
   4:	00 00                	add    %al,(%eax)
	//屏幕宽80高25,80*25
	uint16_t cursorLocation=cursor_y*80+cursor_x;
   6:	e6 00                	out    %al,$0x0
   8:	3b 09                	cmp    (%ecx),%ecx
   a:	00 00                	add    %al,(%eax)
   c:	0b 00                	or     (%eax),%eax
   e:	00 00                	add    %al,(%eax)
  10:	64 00 02             	add    %al,%fs:(%edx)
  13:	00 00                	add    %al,(%eax)
  15:	00 00                	add    %al,(%eax)
  17:	00 1d 00 00 00 64    	add    %bl,0x64000000
  1d:	00 02                	add    %al,(%edx)
  1f:	00 00                	add    %al,(%eax)
  21:	00 00                	add    %al,(%eax)
  23:	00 2f                	add    %ch,(%edi)
  25:	00 00                	add    %al,(%eax)
  27:	00 3c 00             	add    %bh,(%eax,%eax,1)
  2a:	00 00                	add    %al,(%eax)
	** 向它写入一个值来指定内部的某个寄存器
	** 光标寄存器的索引值分别是14和15,
	** 分别存储光标位置的高8位和低8位
	** 可以通过端口0x3d5对其内容进行读写
	*/
	outb(0x3d4,14);					//准备设置光标的高8位
  2c:	00 00                	add    %al,(%eax)
  2e:	00 00                	add    %al,(%eax)
  30:	3e 00 00             	add    %al,%ds:(%eax)
  33:	00 80 00 00 00 00    	add    %al,0x0(%eax)
  39:	00 00                	add    %al,(%eax)
  3b:	00 68 00             	add    %ch,0x0(%eax)
	outb(0x3d5,cursorLocation>>8);	//设置光标高8位
  3e:	00 00                	add    %al,(%eax)
  40:	80 00 00             	addb   $0x0,(%eax)
  43:	00 00                	add    %al,(%eax)
  45:	00 00                	add    %al,(%eax)
  47:	00 82 00 00 00 80    	add    %al,-0x80000000(%edx)
  4d:	00 00                	add    %al,(%eax)
  4f:	00 00                	add    %al,(%eax)
  51:	00 00                	add    %al,(%eax)
  53:	00 b1 00 00 00 80    	add    %dh,-0x80000000(%ecx)
  59:	00 00                	add    %al,(%eax)
	outb(0x3d4,15);					//准备设置光标的低8位
  5b:	00 00                	add    %al,(%eax)
  5d:	00 00                	add    %al,(%eax)
  5f:	00 dc                	add    %bl,%ah
  61:	00 00                	add    %al,(%eax)
  63:	00 80 00 00 00 00    	add    %al,0x0(%eax)
  69:	00 00                	add    %al,(%eax)
  6b:	00 0c 01             	add    %cl,(%ecx,%eax,1)
	outb(0x3d5,cursorLocation);		//设置光标低8位
  6e:	00 00                	add    %al,(%eax)
  70:	80 00 00             	addb   $0x0,(%eax)
  73:	00 00                	add    %al,(%eax)
  75:	00 00                	add    %al,(%eax)
  77:	00 84 01 00 00 80 00 	add    %al,0x800000(%ecx,%eax,1)
  7e:	00 00                	add    %al,(%eax)
  80:	00 00                	add    %al,(%eax)
  82:	00 00                	add    %al,(%eax)
}
  84:	da 01                	fiaddl (%ecx)
  86:	00 00                	add    %al,(%eax)

//清屏
void console_clear()
{
  88:	80 00 00             	addb   $0x0,(%eax)
  8b:	00 00                	add    %al,(%eax)
	uint8_t attribute_byte=0x07; //黑底白字
  8d:	00 00                	add    %al,(%eax)
  8f:	00 2c 02             	add    %ch,(%edx,%eax,1)
	uint16_t blank=0x20 | (attribute_byte << 8); //一个字，表示黑底白字的空格，用来清屏
  92:	00 00                	add    %al,(%eax)
  94:	80 00 00             	addb   $0x0,(%eax)
  97:	00 00                	add    %al,(%eax)
  99:	00 00                	add    %al,(%eax)
  9b:	00 71 02             	add    %dh,0x2(%ecx)
  9e:	00 00                	add    %al,(%eax)
	
	int i;
	for (i=0;i<80*25;i++)
  a0:	80 00 00             	addb   $0x0,(%eax)
  a3:	00 00                	add    %al,(%eax)
  a5:	00 00                	add    %al,(%eax)
  a7:	00 9e 02 00 00 80    	add    %bl,-0x7ffffffe(%esi)
	{
		video_memory[i]=blank;
  ad:	00 00                	add    %al,(%eax)
  af:	00 00                	add    %al,(%eax)
  b1:	00 00                	add    %al,(%eax)
  b3:	00 cf                	add    %cl,%bh
  b5:	02 00                	add    (%eax),%al
  b7:	00 80 00 00 00 00    	add    %al,0x0(%eax)
{
	uint8_t attribute_byte=0x07; //黑底白字
	uint16_t blank=0x20 | (attribute_byte << 8); //一个字，表示黑底白字的空格，用来清屏
	
	int i;
	for (i=0;i<80*25;i++)
  bd:	00 00                	add    %al,(%eax)
  bf:	00 f9                	add    %bh,%cl
  c1:	02 00                	add    (%eax),%al
  c3:	00 80 00 00 00 00    	add    %al,0x0(%eax)
	{
		video_memory[i]=blank;
	}

	cursor_x=0;
  c9:	00 00                	add    %al,(%eax)
  cb:	00 22                	add    %ah,(%edx)
  cd:	03 00                	add    (%eax),%eax
	cursor_y=0;
  cf:	00 80 00 00 00 00    	add    %al,0x0(%eax)
  d5:	00 00                	add    %al,(%eax)
	move_cursor();
  d7:	00 3c 03             	add    %bh,(%ebx,%eax,1)
  da:	00 00                	add    %al,(%eax)
}
  dc:	80 00 00             	addb   $0x0,(%eax)

//滚屏
static void scroll()
{
  df:	00 00                	add    %al,(%eax)
  e1:	00 00                	add    %al,(%eax)
  e3:	00 57 03             	add    %dl,0x3(%edi)
	/* 滚屏很简单，把前24行一次向前挪动一行
	** 最后一行用黑底白字的空格填充 */
	uint8_t attribute_byte=0x07;
  e6:	00 00                	add    %al,(%eax)
	uint16_t blank=0x20 | (attribute_byte << 8);
  e8:	80 00 00             	addb   $0x0,(%eax)
  eb:	00 00                	add    %al,(%eax)
  ed:	00 00                	add    %al,(%eax)
  ef:	00 78 03             	add    %bh,0x3(%eax)
  f2:	00 00                	add    %al,(%eax)
  f4:	80 00 00             	addb   $0x0,(%eax)

	//cursor_y超过或者等于25时候需要滚屏
	if(cursor_y>=25)
  f7:	00 00                	add    %al,(%eax)
  f9:	00 00                	add    %al,(%eax)
  fb:	00 97 03 00 00 80    	add    %dl,-0x7ffffffd(%edi)
	{
		int i;
		//除了第一行的每一行往前一行覆盖
		for (i=0;i<24*80;i++)
 101:	00 00                	add    %al,(%eax)
 103:	00 00                	add    %al,(%eax)
 105:	00 00                	add    %al,(%eax)
 107:	00 b6 03 00 00 80    	add    %dh,-0x7ffffffd(%esi)
		{
			video_memory[i]=video_memory[i+80];
 10d:	00 00                	add    %al,(%eax)
 10f:	00 00                	add    %al,(%eax)
 111:	00 00                	add    %al,(%eax)
 113:	00 d7                	add    %dl,%bh
 115:	03 00                	add    (%eax),%eax
 117:	00 80 00 00 00 00    	add    %al,0x0(%eax)
 11d:	00 00                	add    %al,(%eax)
 11f:	00 eb                	add    %ch,%bl
 121:	03 00                	add    (%eax),%eax
 123:	00 82 00 00 00 00    	add    %al,0x0(%edx)
 129:	00 00                	add    %al,(%eax)
	//cursor_y超过或者等于25时候需要滚屏
	if(cursor_y>=25)
	{
		int i;
		//除了第一行的每一行往前一行覆盖
		for (i=0;i<24*80;i++)
 12b:	00 fc                	add    %bh,%ah
 12d:	03 00                	add    (%eax),%eax
 12f:	00 82 00 00 00 00    	add    %al,0x0(%edx)
 135:	00 00                	add    %al,(%eax)
 137:	00 0c 04             	add    %cl,(%esp,%eax,1)
		{
			video_memory[i]=video_memory[i+80];
		}
		//最后一行填充
		for(i=24*80;i<25*80;i++)
 13a:	00 00                	add    %al,(%eax)
 13c:	80 00 1f             	addb   $0x1f,(%eax)
 13f:	00 00                	add    %al,(%eax)
		{
			video_memory[i]=blank;
 141:	00 00                	add    %al,(%eax)
 143:	00 22                	add    %ah,(%edx)
 145:	04 00                	add    $0x0,%al
 147:	00 80 00 20 00 00    	add    %al,0x2000(%eax)
 14d:	00 00                	add    %al,(%eax)
 14f:	00 37                	add    %dh,(%edi)
 151:	04 00                	add    $0x0,%al
 153:	00 80 00 21 00 00    	add    %al,0x2100(%eax)
		for (i=0;i<24*80;i++)
		{
			video_memory[i]=video_memory[i+80];
		}
		//最后一行填充
		for(i=24*80;i<25*80;i++)
 159:	00 00                	add    %al,(%eax)
 15b:	00 4e 04             	add    %cl,0x4(%esi)
 15e:	00 00                	add    %al,(%eax)
 160:	80 00 22             	addb   $0x22,(%eax)
		{
			video_memory[i]=blank;
		}
		//重置cursor_y
		cursor_y=24;
 163:	00 00                	add    %al,(%eax)
 165:	00 00                	add    %al,(%eax)
 167:	00 64 04 00          	add    %ah,0x0(%esp,%eax,1)
	}
}

//显示字符
void console_putc_color(char c, real_color_t back,real_color_t fore)
{
 16b:	00 80 00 23 00 00    	add    %al,0x2300(%eax)
 171:	00 00                	add    %al,(%eax)
 173:	00 7a 04             	add    %bh,0x4(%edx)
 176:	00 00                	add    %al,(%eax)
	uint8_t back_color=(uint8_t)back;
 178:	80 00 24             	addb   $0x24,(%eax)
 17b:	00 00                	add    %al,(%eax)
	uint8_t fore_color=(uint8_t)fore;
 17d:	00 00                	add    %al,(%eax)
 17f:	00 8e 04 00 00 80    	add    %cl,-0x7ffffffc(%esi)

	uint8_t attribute_byte=(back_color << 4) | (fore_color & 0x0f);
 185:	00 26                	add    %ah,(%esi)
	...
 18f:	00 a2 00 00 00 00    	add    %ah,0x0(%edx)
 195:	00 00                	add    %al,(%eax)
 197:	00 00                	add    %al,(%eax)
	uint16_t attribute = attribute_byte<<8;
 199:	00 00                	add    %al,(%eax)
 19b:	00 a2 00 00 00 00    	add    %ah,0x0(%edx)
 1a1:	00 00                	add    %al,(%eax)

	//0x08是退格键的ASCII码
	//0x09是TAB键的ASCII码
	if (c==0x08 && cursor_x)
 1a3:	00 a1 04 00 00 82    	add    %ah,-0x7dfffffc(%ecx)
 1a9:	00 00                	add    %al,(%eax)
 1ab:	00 00                	add    %al,(%eax)
 1ad:	00 00                	add    %al,(%eax)
 1af:	00 b3 04 00 00 80    	add    %dh,-0x7ffffffc(%ebx)
	{
		cursor_x--;
 1b5:	00 00                	add    %al,(%eax)
 1b7:	00 00                	add    %al,(%eax)
 1b9:	00 00                	add    %al,(%eax)
 1bb:	00 a2 05 00 00 80    	add    %ah,-0x7ffffffb(%edx)
 1c1:	00 29                	add    %ch,(%ecx)
	...
	}
	else if (c==0x09)
 1cb:	00 a2 00 00 00 00    	add    %ah,0x0(%edx)
	{
		cursor_x=(cursor_x+4) & ~(4-1);//这里设置tab长度为4，使其4对其
 1d1:	00 00                	add    %al,(%eax)
 1d3:	00 bc 05 00 00 24 00 	add    %bh,0x240000(%ebp,%eax,1)
 1da:	20 00                	and    %al,(%eax)
	...
	}
	else if (c=='\r')
 1e4:	2e 00 00             	add    %al,%cs:(%eax)
	...
	{
		cursor_x=0;
 1ef:	00 44 00 21          	add    %al,0x21(%eax,%eax,1)
	...
	}
	else if (c=='\n')
	{
		cursor_x=0;
 1fb:	00 44 00 23          	add    %al,0x23(%eax,%eax,1)
		cursor_y++;
 1ff:	00 06                	add    %al,(%esi)
 201:	00 00                	add    %al,(%eax)
 203:	00 00                	add    %al,(%eax)
 205:	00 00                	add    %al,(%eax)
 207:	00 44 00 30          	add    %al,0x30(%eax,%eax,1)
 20b:	00 2c 00             	add    %ch,(%eax,%eax,1)
 20e:	00 00                	add    %al,(%eax)
	}
	else if (c>=' ')
 210:	00 00                	add    %al,(%eax)
 212:	00 00                	add    %al,(%eax)
 214:	44                   	inc    %esp
	{
		video_memory[cursor_y*80+cursor_x] = c | attribute;
 215:	00 31                	add    %dh,(%ecx)
 217:	00 3e                	add    %bh,(%esi)
 219:	00 00                	add    %al,(%eax)
 21b:	00 00                	add    %al,(%eax)
 21d:	00 00                	add    %al,(%eax)
 21f:	00 44 00 32          	add    %al,0x32(%eax,%eax,1)
 223:	00 5a 00             	add    %bl,0x0(%edx)
 226:	00 00                	add    %al,(%eax)
 228:	00 00                	add    %al,(%eax)
 22a:	00 00                	add    %al,(%eax)
 22c:	44                   	inc    %esp
 22d:	00 33                	add    %dh,(%ebx)
 22f:	00 6c 00 00          	add    %ch,0x0(%eax,%eax,1)
 233:	00 00                	add    %al,(%eax)
 235:	00 00                	add    %al,(%eax)
 237:	00 44 00 34          	add    %al,0x34(%eax,%eax,1)
 23b:	00 84 00 00 00 d0 05 	add    %al,0x5d00000(%eax,%eax,1)
 242:	00 00                	add    %al,(%eax)
 244:	80 00 23             	addb   $0x23,(%eax)
 247:	00 f6                	add    %dh,%dh
 249:	ff                   	(bad)  
 24a:	ff                   	(bad)  
 24b:	ff 00                	incl   (%eax)
 24d:	00 00                	add    %al,(%eax)
		cursor_x++;
 24f:	00 c0                	add    %al,%al
	...
 259:	00 00                	add    %al,(%eax)
 25b:	00 e0                	add    %ah,%al
 25d:	00 00                	add    %al,(%eax)
	}
	//如果显示到达行尾(x>=80)则自动换行
	if (cursor_x >= 80)
 25f:	00 87 00 00 00 00    	add    %al,0x0(%edi)
 265:	00 00                	add    %al,(%eax)
 267:	00 24 00             	add    %ah,(%eax,%eax,1)
	{
		cursor_x=0;
 26a:	00 00                	add    %al,(%eax)
 26c:	87 00                	xchg   %eax,(%eax)
 26e:	00 00                	add    %al,(%eax)
		cursor_y++;
 270:	00 00                	add    %al,(%eax)
 272:	00 00                	add    %al,(%eax)
 274:	4e                   	dec    %esi
 275:	00 00                	add    %al,(%eax)
 277:	00 87 00 00 00 e5    	add    %al,-0x1b000000(%edi)
 27d:	05 00 00 24 00       	add    $0x240000,%eax
	}
	//滚屏，需不需要留给函数自己判断
	scroll();
 282:	37                   	aaa    
	...

	//移动光标
	move_cursor();
}
 28b:	00 2e                	add    %ch,(%esi)

void console_write(char *cstr)
{
 28d:	00 00                	add    %al,(%eax)
 28f:	00 87 00 00 00 00    	add    %al,0x0(%edi)
	while(*cstr) 
	{
		console_putc_color(*cstr++,rc_black,rc_white);
 295:	00 00                	add    %al,(%eax)
 297:	00 44 00 38          	add    %al,0x38(%eax,%eax,1)
	...
 2a3:	00 44 00 39          	add    %al,0x39(%eax,%eax,1)
 2a7:	00 06                	add    %al,(%esi)
 2a9:	00 00                	add    %al,(%eax)
 2ab:	00 00                	add    %al,(%eax)
 2ad:	00 00                	add    %al,(%eax)
 2af:	00 44 00 3a          	add    %al,0x3a(%eax,%eax,1)
	move_cursor();
}

void console_write(char *cstr)
{
	while(*cstr) 
 2b3:	00 0a                	add    %cl,(%edx)
 2b5:	00 00                	add    %al,(%eax)
 2b7:	00 00                	add    %al,(%eax)
 2b9:	00 00                	add    %al,(%eax)
 2bb:	00 44 00 3d          	add    %al,0x3d(%eax,%eax,1)
	{
		console_putc_color(*cstr++,rc_black,rc_white);
	}
}
 2bf:	00 18                	add    %bl,(%eax)

void console_write_color(char *cstr,real_color_t back,real_color_t fore)
{
 2c1:	00 00                	add    %al,(%eax)
 2c3:	00 00                	add    %al,(%eax)
 2c5:	00 00                	add    %al,(%eax)
	while(*cstr)
 2c7:	00 44 00 3f          	add    %al,0x3f(%eax,%eax,1)
	{
		console_putc_color(*cstr++,back,fore);
 2cb:	00 21                	add    %ah,(%ecx)
 2cd:	00 00                	add    %al,(%eax)
 2cf:	00 00                	add    %al,(%eax)
 2d1:	00 00                	add    %al,(%eax)
 2d3:	00 44 00 3d          	add    %al,0x3d(%eax,%eax,1)
 2d7:	00 34 00             	add    %dh,(%eax,%eax,1)
 2da:	00 00                	add    %al,(%eax)
 2dc:	00 00                	add    %al,(%eax)
 2de:	00 00                	add    %al,(%eax)
 2e0:	44                   	inc    %esp
 2e1:	00 3d 00 38 00 00    	add    %bh,0x3800
 2e7:	00 00                	add    %al,(%eax)
	}
}

void console_write_color(char *cstr,real_color_t back,real_color_t fore)
{
	while(*cstr)
 2e9:	00 00                	add    %al,(%eax)
 2eb:	00 44 00 42          	add    %al,0x42(%eax,%eax,1)
 2ef:	00 41 00             	add    %al,0x0(%ecx)
 2f2:	00 00                	add    %al,(%eax)
	{
		console_putc_color(*cstr++,back,fore);
	}
}
 2f4:	00 00                	add    %al,(%eax)

void console_write_hex(uint32_t n, real_color_t back,real_color_t fore)
{
 2f6:	00 00                	add    %al,(%eax)
 2f8:	44                   	inc    %esp
 2f9:	00 43 00             	add    %al,0x0(%ebx)
	//32位数用16进制输出最多8位
	char hex_header[]="0x"; //输出十六进制数的格式0x
 2fc:	48                   	dec    %eax
 2fd:	00 00                	add    %al,(%eax)
 2ff:	00 00                	add    %al,(%eax)
 301:	00 00                	add    %al,(%eax)
 303:	00 44 00 44          	add    %al,0x44(%eax,%eax,1)
	char hex_digits[8];		//存放16进制数的每一位，地位在前，高位在后；
	char result[8];			//存放最终结果，高位在前，低位在后
	uint8_t num=0;			//表示该数有几位（16进制）
 307:	00 4f 00             	add    %cl,0x0(%edi)
	
	console_write_color(hex_header,back,fore);
 30a:	00 00                	add    %al,(%eax)
 30c:	00 00                	add    %al,(%eax)
 30e:	00 00                	add    %al,(%eax)
 310:	44                   	inc    %esp
 311:	00 45 00             	add    %al,0x0(%ebp)
 314:	54                   	push   %esp
 315:	00 00                	add    %al,(%eax)
 317:	00 fb                	add    %bh,%bl
 319:	05 00 00 80 00       	add    $0x800000,%eax
 31e:	39 00                	cmp    %eax,(%eax)

	if(n==0)				//如果是0直接输出0
 320:	f3 ff                	repz (bad) 
 322:	ff                   	(bad)  
 323:	ff 10                	call   *(%eax)
	{
		console_putc_color('0',back,fore);
 325:	06                   	push   %es
 326:	00 00                	add    %al,(%eax)
 328:	80 00 3a             	addb   $0x3a,(%eax)
 32b:	00 f0                	add    %dh,%al
 32d:	ff                   	(bad)  
 32e:	ff                   	(bad)  
 32f:	ff 1c 06             	lcall  *(%esi,%eax,1)
 332:	00 00                	add    %al,(%eax)
 334:	80 00 3c             	addb   $0x3c,(%eax)
 337:	00 f4                	add    %dh,%ah
 339:	ff                   	(bad)  
 33a:	ff                   	(bad)  
 33b:	ff 00                	incl   (%eax)
		return;
	}

	while(n)				//循环，每次去除最低位放在hex_digits里边，并且让n除以16
	{
		char digit=n & (0xf);
 33d:	00 00                	add    %al,(%eax)
 33f:	00 c0                	add    %al,%al
	...
		hex_digits[num++]=hex_set[digit];
 349:	00 00                	add    %al,(%eax)
 34b:	00 e0                	add    %ah,%al
 34d:	00 00                	add    %al,(%eax)
 34f:	00 57 00             	add    %dl,0x0(%edi)
 352:	00 00                	add    %al,(%eax)
 354:	00 00                	add    %al,(%eax)
 356:	00 00                	add    %al,(%eax)
 358:	24 00                	and    $0x0,%al
 35a:	00 00                	add    %al,(%eax)
 35c:	57                   	push   %edi
 35d:	00 00                	add    %al,(%eax)
 35f:	00 00                	add    %al,(%eax)
 361:	00 00                	add    %al,(%eax)
		n=n>>4;
 363:	00 4e 00             	add    %cl,0x0(%esi)
	{
		console_putc_color('0',back,fore);
		return;
	}

	while(n)				//循环，每次去除最低位放在hex_digits里边，并且让n除以16
 366:	00 00                	add    %al,(%eax)
 368:	de 00                	fiadd  (%eax)
 36a:	00 00                	add    %al,(%eax)
		char digit=n & (0xf);
		hex_digits[num++]=hex_set[digit];
		n=n>>4;
	}
	uint8_t i,j;
	for(i=0,j=num-1;i<num;i++,j--)
 36c:	24 06                	and    $0x6,%al
 36e:	00 00                	add    %al,(%eax)
 370:	24 00                	and    $0x0,%al
 372:	48                   	dec    %eax
 373:	00 de                	add    %bl,%dh
 375:	00 00                	add    %al,(%eax)
 377:	00 00                	add    %al,(%eax)
 379:	00 00                	add    %al,(%eax)
 37b:	00 2e                	add    %ch,(%esi)
	{
		result[i]=hex_digits[j];
 37d:	00 00                	add    %al,(%eax)
 37f:	00 de                	add    %bl,%dh
 381:	00 00                	add    %al,(%eax)
 383:	00 00                	add    %al,(%eax)
 385:	00 00                	add    %al,(%eax)
 387:	00 44 00 49          	add    %al,0x49(%eax,%eax,1)
	...
		char digit=n & (0xf);
		hex_digits[num++]=hex_set[digit];
		n=n>>4;
	}
	uint8_t i,j;
	for(i=0,j=num-1;i<num;i++,j--)
 393:	00 44 00 4c          	add    %al,0x4c(%eax,%eax,1)
 397:	00 06                	add    %al,(%esi)
 399:	00 00                	add    %al,(%eax)
 39b:	00 00                	add    %al,(%eax)
 39d:	00 00                	add    %al,(%eax)
 39f:	00 44 00 4d          	add    %al,0x4d(%eax,%eax,1)
 3a3:	00 0a                	add    %cl,(%edx)
 3a5:	00 00                	add    %al,(%eax)
 3a7:	00 00                	add    %al,(%eax)
 3a9:	00 00                	add    %al,(%eax)
	{
		result[i]=hex_digits[j];
	}
	result[num]=0;
 3ab:	00 44 00 50          	add    %al,0x50(%eax,%eax,1)
 3af:	00 18                	add    %bl,(%eax)
 3b1:	00 00                	add    %al,(%eax)
	console_write_color(result,back,fore);
 3b3:	00 00                	add    %al,(%eax)
 3b5:	00 00                	add    %al,(%eax)
 3b7:	00 44 00 54          	add    %al,0x54(%eax,%eax,1)
 3bb:	00 23                	add    %ah,(%ebx)
 3bd:	00 00                	add    %al,(%eax)
 3bf:	00 00                	add    %al,(%eax)
 3c1:	00 00                	add    %al,(%eax)
 3c3:	00 44 00 56          	add    %al,0x56(%eax,%eax,1)
 3c7:	00 2c 00             	add    %ch,(%eax,%eax,1)
}

void console_write_dec(uint32_t n, real_color_t back, real_color_t fore)
{
 3ca:	00 00                	add    %al,(%eax)
 3cc:	00 00                	add    %al,(%eax)
 3ce:	00 00                	add    %al,(%eax)
	//32位数用10进制输出最多10位
	char dec_digits[10];		//存放10进制数的每一位，低位在前，高位在后；
	char result[10];			//存放最终结果，高位在前，低位在后
	uint8_t num=0;				//表示该数有几位（10进制）
 3d0:	44                   	inc    %esp
 3d1:	00 54 00 4d          	add    %dl,0x4d(%eax,%eax,1)

	if(n==0)				//如果是0直接输出0
 3d5:	00 00                	add    %al,(%eax)
 3d7:	00 00                	add    %al,(%eax)
 3d9:	00 00                	add    %al,(%eax)
	{
		console_putc_color('0',back,fore);
 3db:	00 44 00 54          	add    %al,0x54(%eax,%eax,1)
 3df:	00 51 00             	add    %dl,0x0(%ecx)
 3e2:	00 00                	add    %al,(%eax)
 3e4:	00 00                	add    %al,(%eax)
 3e6:	00 00                	add    %al,(%eax)
 3e8:	44                   	inc    %esp
 3e9:	00 59 00             	add    %bl,0x0(%ecx)
 3ec:	5a                   	pop    %edx
 3ed:	00 00                	add    %al,(%eax)
 3ef:	00 00                	add    %al,(%eax)
 3f1:	00 00                	add    %al,(%eax)
		return;
	}

	while(n)				//循环，每次去除最低位放在dec_digits里边，并且让n除以10
	{
		char digit=n%10;
 3f3:	00 44 00 5b          	add    %al,0x5b(%eax,%eax,1)
 3f7:	00 63 00             	add    %ah,0x0(%ebx)
 3fa:	00 00                	add    %al,(%eax)
 3fc:	00 00                	add    %al,(%eax)
 3fe:	00 00                	add    %al,(%eax)
 400:	44                   	inc    %esp
 401:	00 59 00             	add    %bl,0x0(%ecx)
 404:	76 00                	jbe    406 <.stab+0x406>
 406:	00 00                	add    %al,(%eax)
 408:	00 00                	add    %al,(%eax)
 40a:	00 00                	add    %al,(%eax)
 40c:	44                   	inc    %esp
 40d:	00 59 00             	add    %bl,0x0(%ecx)
 410:	7a 00                	jp     412 <.stab+0x412>
		dec_digits[num++]=dec_set[digit];
 412:	00 00                	add    %al,(%eax)
 414:	00 00                	add    %al,(%eax)
 416:	00 00                	add    %al,(%eax)
 418:	44                   	inc    %esp
 419:	00 5e 00             	add    %bl,0x0(%esi)
 41c:	83 00 00             	addl   $0x0,(%eax)
 41f:	00 00                	add    %al,(%eax)
 421:	00 00                	add    %al,(%eax)
 423:	00 44 00 60          	add    %al,0x60(%eax,%eax,1)
 427:	00 8a 00 00 00 33    	add    %cl,0x33000000(%edx)
		n/=10;
 42d:	06                   	push   %es
 42e:	00 00                	add    %al,(%eax)
 430:	80 00 4c             	addb   $0x4c,(%eax)
 433:	00 fb                	add    %bh,%bl
 435:	ff                   	(bad)  
 436:	ff                   	(bad)  
 437:	ff 48 06             	decl   0x6(%eax)
 43a:	00 00                	add    %al,(%eax)
 43c:	80 00 4d             	addb   $0x4d,(%eax)
	{
		console_putc_color('0',back,fore);
		return;
	}

	while(n)				//循环，每次去除最低位放在dec_digits里边，并且让n除以10
 43f:	00 f8                	add    %bh,%al
 441:	ff                   	(bad)  
 442:	ff                   	(bad)  
 443:	ff 00                	incl   (%eax)
		char digit=n%10;
		dec_digits[num++]=dec_set[digit];
		n/=10;
	}
	uint8_t i,j;
	for(i=0,j=num-1;i<num;i++,j--)
 445:	00 00                	add    %al,(%eax)
 447:	00 c0                	add    %al,%al
 449:	00 00                	add    %al,(%eax)
 44b:	00 00                	add    %al,(%eax)
 44d:	00 00                	add    %al,(%eax)
 44f:	00 54 06 00          	add    %dl,0x0(%esi,%eax,1)
 453:	00 80 00 52 00 fc    	add    %al,-0x3ffae00(%eax)
	{
		result[i]=dec_digits[j];
 459:	ff                   	(bad)  
 45a:	ff                   	(bad)  
 45b:	ff 00                	incl   (%eax)
 45d:	00 00                	add    %al,(%eax)
 45f:	00 c0                	add    %al,%al
 461:	00 00                	add    %al,(%eax)
 463:	00 23                	add    %ah,(%ebx)
 465:	00 00                	add    %al,(%eax)
		char digit=n%10;
		dec_digits[num++]=dec_set[digit];
		n/=10;
	}
	uint8_t i,j;
	for(i=0,j=num-1;i<num;i++,j--)
 467:	00 00                	add    %al,(%eax)
 469:	00 00                	add    %al,(%eax)
 46b:	00 e0                	add    %ah,%al
 46d:	00 00                	add    %al,(%eax)
 46f:	00 8a 00 00 00 00    	add    %cl,0x0(%edx)
 475:	00 00                	add    %al,(%eax)
 477:	00 e0                	add    %ah,%al
 479:	00 00                	add    %al,(%eax)
 47b:	00 8d 00 00 00 00    	add    %cl,0x0(%ebp)
 481:	00 00                	add    %al,(%eax)
	{
		result[i]=dec_digits[j];
	}
	result[num]=0;
 483:	00 24 00             	add    %ah,(%eax,%eax,1)
 486:	00 00                	add    %al,(%eax)
 488:	8d 00                	lea    (%eax),%eax
 48a:	00 00                	add    %al,(%eax)
	console_write_color(result,back,fore);
 48c:	00 00                	add    %al,(%eax)
 48e:	00 00                	add    %al,(%eax)
 490:	4e                   	dec    %esi
 491:	00 00                	add    %al,(%eax)
 493:	00 6b 01             	add    %ch,0x1(%ebx)
 496:	00 00                	add    %al,(%eax)
 498:	5c                   	pop    %esp
 499:	06                   	push   %es
 49a:	00 00                	add    %al,(%eax)
 49c:	24 00                	and    $0x0,%al
 49e:	63 00                	arpl   %ax,(%eax)
 4a0:	00 00                	add    %al,(%eax)
 4a2:	00 00                	add    %al,(%eax)
 4a4:	77 06                	ja     4ac <.stab+0x4ac>
 4a6:	00 00                	add    %al,(%eax)
 4a8:	a0 00 63 00 08       	mov    0x8006300,%al
 4ad:	00 00                	add    %al,(%eax)
 4af:	00 80 06 00 00 a0    	add    %al,-0x5ffffffa(%eax)
 4b5:	00 63 00             	add    %ah,0x0(%ebx)
 4b8:	0c 00                	or     $0x0,%al
 4ba:	00 00                	add    %al,(%eax)
 4bc:	8c 06                	mov    %es,(%esi)
 4be:	00 00                	add    %al,(%eax)
 4c0:	a0 00 63 00 10       	mov    0x10006300,%al
 4c5:	00 00                	add    %al,(%eax)
 4c7:	00 00                	add    %al,(%eax)
 4c9:	00 00                	add    %al,(%eax)
 4cb:	00 2e                	add    %ch,(%esi)
 4cd:	00 00                	add    %al,(%eax)
 4cf:	00 6b 01             	add    %ch,0x1(%ebx)
 4d2:	00 00                	add    %al,(%eax)
 4d4:	00 00                	add    %al,(%eax)
 4d6:	00 00                	add    %al,(%eax)
 4d8:	44                   	inc    %esp
 4d9:	00 64 00 00          	add    %ah,0x0(%eax,%eax,1)
 4dd:	00 00                	add    %al,(%eax)
 4df:	00 00                	add    %al,(%eax)
 4e1:	00 00                	add    %al,(%eax)
 4e3:	00 44 00 65          	add    %al,0x65(%eax,%eax,1)
 4e7:	00 0c 00             	add    %cl,(%eax,%eax,1)
 4ea:	00 00                	add    %al,(%eax)
 4ec:	00 00                	add    %al,(%eax)
 4ee:	00 00                	add    %al,(%eax)
 4f0:	44                   	inc    %esp
 4f1:	00 66 00             	add    %ah,0x0(%esi)
 4f4:	12 00                	adc    (%eax),%al
 4f6:	00 00                	add    %al,(%eax)
 4f8:	00 00                	add    %al,(%eax)
 4fa:	00 00                	add    %al,(%eax)
 4fc:	44                   	inc    %esp
 4fd:	00 68 00             	add    %ch,0x0(%eax)
 500:	18 00                	sbb    %al,(%eax)
 502:	00 00                	add    %al,(%eax)
 504:	00 00                	add    %al,(%eax)
 506:	00 00                	add    %al,(%eax)
 508:	44                   	inc    %esp
 509:	00 69 00             	add    %ch,0x0(%ecx)
 50c:	2d 00 00 00 00       	sub    $0x0,%eax
 511:	00 00                	add    %al,(%eax)
 513:	00 44 00 6d          	add    %al,0x6d(%eax,%eax,1)
 517:	00 38                	add    %bh,(%eax)
 519:	00 00                	add    %al,(%eax)
 51b:	00 00                	add    %al,(%eax)
 51d:	00 00                	add    %al,(%eax)
 51f:	00 44 00 6d          	add    %al,0x6d(%eax,%eax,1)
 523:	00 3e                	add    %bh,(%esi)
 525:	00 00                	add    %al,(%eax)
 527:	00 00                	add    %al,(%eax)
 529:	00 00                	add    %al,(%eax)
 52b:	00 44 00 6f          	add    %al,0x6f(%eax,%eax,1)
 52f:	00 49 00             	add    %cl,0x0(%ecx)
 532:	00 00                	add    %al,(%eax)
 534:	00 00                	add    %al,(%eax)
 536:	00 00                	add    %al,(%eax)
 538:	44                   	inc    %esp
 539:	00 71 00             	add    %dh,0x0(%ecx)
 53c:	5d                   	pop    %ebp
 53d:	00 00                	add    %al,(%eax)
 53f:	00 00                	add    %al,(%eax)
 541:	00 00                	add    %al,(%eax)
 543:	00 44 00 73          	add    %al,0x73(%eax,%eax,1)
 547:	00 63 00             	add    %ah,0x0(%ebx)
 54a:	00 00                	add    %al,(%eax)
 54c:	00 00                	add    %al,(%eax)
 54e:	00 00                	add    %al,(%eax)
 550:	44                   	inc    %esp
 551:	00 75 00             	add    %dh,0x0(%ebp)
 554:	77 00                	ja     556 <.stab+0x556>
 556:	00 00                	add    %al,(%eax)
 558:	00 00                	add    %al,(%eax)
 55a:	00 00                	add    %al,(%eax)
 55c:	44                   	inc    %esp
 55d:	00 77 00             	add    %dh,0x0(%edi)
 560:	7d 00                	jge    562 <.stab+0x562>
 562:	00 00                	add    %al,(%eax)
 564:	00 00                	add    %al,(%eax)
 566:	00 00                	add    %al,(%eax)
 568:	44                   	inc    %esp
 569:	00 79 00             	add    %bh,0x0(%ecx)
 56c:	86 00                	xchg   %al,(%eax)
 56e:	00 00                	add    %al,(%eax)
 570:	00 00                	add    %al,(%eax)
 572:	00 00                	add    %al,(%eax)
 574:	44                   	inc    %esp
 575:	00 7b 00             	add    %bh,0x0(%ebx)
 578:	8c 00                	mov    %es,(%eax)
 57a:	00 00                	add    %al,(%eax)
 57c:	00 00                	add    %al,(%eax)
 57e:	00 00                	add    %al,(%eax)
 580:	44                   	inc    %esp
 581:	00 7c 00 93          	add    %bh,-0x6d(%eax,%eax,1)
 585:	00 00                	add    %al,(%eax)
 587:	00 00                	add    %al,(%eax)
 589:	00 00                	add    %al,(%eax)
 58b:	00 44 00 7e          	add    %al,0x7e(%eax,%eax,1)
 58f:	00 a4 00 00 00 00 00 	add    %ah,0x0(%eax,%eax,1)
 596:	00 00                	add    %al,(%eax)
 598:	44                   	inc    %esp
 599:	00 80 00 aa 00 00    	add    %al,0xaa00(%eax)
 59f:	00 00                	add    %al,(%eax)
 5a1:	00 00                	add    %al,(%eax)
 5a3:	00 44 00 81          	add    %al,-0x7f(%eax,%eax,1)
 5a7:	00 e4                	add    %ah,%ah
 5a9:	00 00                	add    %al,(%eax)
 5ab:	00 00                	add    %al,(%eax)
 5ad:	00 00                	add    %al,(%eax)
 5af:	00 44 00 84          	add    %al,-0x7c(%eax,%eax,1)
 5b3:	00 f3                	add    %dh,%bl
 5b5:	00 00                	add    %al,(%eax)
 5b7:	00 00                	add    %al,(%eax)
 5b9:	00 00                	add    %al,(%eax)
 5bb:	00 44 00 86          	add    %al,-0x7a(%eax,%eax,1)
 5bf:	00 fe                	add    %bh,%dh
 5c1:	00 00                	add    %al,(%eax)
 5c3:	00 00                	add    %al,(%eax)
 5c5:	00 00                	add    %al,(%eax)
 5c7:	00 44 00 87          	add    %al,-0x79(%eax,%eax,1)
 5cb:	00 05 01 00 00 00    	add    %al,0x1
 5d1:	00 00                	add    %al,(%eax)
 5d3:	00 44 00 8a          	add    %al,-0x76(%eax,%eax,1)
 5d7:	00 14 01             	add    %dl,(%ecx,%eax,1)
 5da:	00 00                	add    %al,(%eax)
 5dc:	00 00                	add    %al,(%eax)
 5de:	00 00                	add    %al,(%eax)
 5e0:	44                   	inc    %esp
 5e1:	00 8d 00 19 01 00    	add    %cl,0x11900(%ebp)
 5e7:	00 00                	add    %al,(%eax)
 5e9:	00 00                	add    %al,(%eax)
 5eb:	00 44 00 8e          	add    %al,-0x72(%eax,%eax,1)
 5ef:	00 1e                	add    %bl,(%esi)
 5f1:	01 00                	add    %eax,(%eax)
 5f3:	00 98 06 00 00 80    	add    %bl,-0x7ffffffa(%eax)
 5f9:	00 65 00             	add    %ah,0x0(%ebp)
 5fc:	f7 ff                	idiv   %edi
 5fe:	ff                   	(bad)  
 5ff:	ff a9 06 00 00 80    	ljmp   *-0x7ffffffa(%ecx)
 605:	00 66 00             	add    %ah,0x0(%esi)
 608:	f6 ff                	idiv   %bh
 60a:	ff                   	(bad)  
 60b:	ff                   	(bad)  
 60c:	ba 06 00 00 80       	mov    $0x80000006,%edx
 611:	00 68 00             	add    %ch,0x0(%eax)
 614:	f5                   	cmc    
 615:	ff                   	(bad)  
 616:	ff                   	(bad)  
 617:	ff cf                	dec    %edi
 619:	06                   	push   %es
 61a:	00 00                	add    %al,(%eax)
 61c:	80 00 69             	addb   $0x69,(%eax)
 61f:	00 f2                	add    %dh,%dl
 621:	ff                   	(bad)  
 622:	ff                   	(bad)  
 623:	ff                   	(bad)  
 624:	df 06                	fild   (%esi)
 626:	00 00                	add    %al,(%eax)
 628:	80 00 63             	addb   $0x63,(%eax)
 62b:	00 e4                	add    %ah,%ah
 62d:	ff                   	(bad)  
 62e:	ff                   	(bad)  
 62f:	ff 00                	incl   (%eax)
 631:	00 00                	add    %al,(%eax)
 633:	00 c0                	add    %al,%al
	...
 63d:	00 00                	add    %al,(%eax)
 63f:	00 e0                	add    %ah,%al
 641:	00 00                	add    %al,(%eax)
 643:	00 21                	add    %ah,(%ecx)
 645:	01 00                	add    %eax,(%eax)
 647:	00 00                	add    %al,(%eax)
 649:	00 00                	add    %al,(%eax)
 64b:	00 24 00             	add    %ah,(%eax,%eax,1)
 64e:	00 00                	add    %al,(%eax)
 650:	21 01                	and    %eax,(%ecx)
 652:	00 00                	add    %al,(%eax)
 654:	00 00                	add    %al,(%eax)
 656:	00 00                	add    %al,(%eax)
 658:	4e                   	dec    %esi
 659:	00 00                	add    %al,(%eax)
 65b:	00 8c 02 00 00 e7 06 	add    %cl,0x6e70000(%edx,%eax,1)
 662:	00 00                	add    %al,(%eax)
 664:	24 00                	and    $0x0,%al
 666:	90                   	nop
 667:	00 00                	add    %al,(%eax)
 669:	00 00                	add    %al,(%eax)
 66b:	00 fd                	add    %bh,%ch
 66d:	06                   	push   %es
 66e:	00 00                	add    %al,(%eax)
 670:	a0 00 90 00 08       	mov    0x8009000,%al
 675:	00 00                	add    %al,(%eax)
 677:	00 00                	add    %al,(%eax)
 679:	00 00                	add    %al,(%eax)
 67b:	00 2e                	add    %ch,(%esi)
 67d:	00 00                	add    %al,(%eax)
 67f:	00 8c 02 00 00 00 00 	add    %cl,0x0(%edx,%eax,1)
 686:	00 00                	add    %al,(%eax)
 688:	44                   	inc    %esp
 689:	00 91 00 00 00 00    	add    %dl,0x0(%ecx)
 68f:	00 00                	add    %al,(%eax)
 691:	00 00                	add    %al,(%eax)
 693:	00 44 00 92          	add    %al,-0x6e(%eax,%eax,1)
 697:	00 06                	add    %al,(%esi)
 699:	00 00                	add    %al,(%eax)
 69b:	00 00                	add    %al,(%eax)
 69d:	00 00                	add    %al,(%eax)
 69f:	00 44 00 94          	add    %al,-0x6c(%eax,%eax,1)
 6a3:	00 08                	add    %cl,(%eax)
 6a5:	00 00                	add    %al,(%eax)
 6a7:	00 00                	add    %al,(%eax)
 6a9:	00 00                	add    %al,(%eax)
 6ab:	00 44 00 92          	add    %al,-0x6e(%eax,%eax,1)
 6af:	00 27                	add    %ah,(%edi)
 6b1:	00 00                	add    %al,(%eax)
 6b3:	00 00                	add    %al,(%eax)
 6b5:	00 00                	add    %al,(%eax)
 6b7:	00 44 00 96          	add    %al,-0x6a(%eax,%eax,1)
 6bb:	00 31                	add    %dh,(%ecx)
 6bd:	00 00                	add    %al,(%eax)
 6bf:	00 00                	add    %al,(%eax)
 6c1:	00 00                	add    %al,(%eax)
 6c3:	00 24 00             	add    %ah,(%eax,%eax,1)
 6c6:	00 00                	add    %al,(%eax)
 6c8:	34 00                	xor    $0x0,%al
 6ca:	00 00                	add    %al,(%eax)
 6cc:	00 00                	add    %al,(%eax)
 6ce:	00 00                	add    %al,(%eax)
 6d0:	4e                   	dec    %esi
 6d1:	00 00                	add    %al,(%eax)
 6d3:	00 c0                	add    %al,%al
 6d5:	02 00                	add    (%eax),%al
 6d7:	00 11                	add    %dl,(%ecx)
 6d9:	07                   	pop    %es
 6da:	00 00                	add    %al,(%eax)
 6dc:	24 00                	and    $0x0,%al
 6de:	98                   	cwtl   
 6df:	00 00                	add    %al,(%eax)
 6e1:	00 00                	add    %al,(%eax)
 6e3:	00 2d 07 00 00 a0    	add    %ch,0xa0000007
 6e9:	00 98 00 08 00 00    	add    %bl,0x800(%eax)
 6ef:	00 3a                	add    %bh,(%edx)
 6f1:	07                   	pop    %es
 6f2:	00 00                	add    %al,(%eax)
 6f4:	a0 00 98 00 0c       	mov    0xc009800,%al
 6f9:	00 00                	add    %al,(%eax)
 6fb:	00 46 07             	add    %al,0x7(%esi)
 6fe:	00 00                	add    %al,(%eax)
 700:	a0 00 98 00 10       	mov    0x10009800,%al
 705:	00 00                	add    %al,(%eax)
 707:	00 00                	add    %al,(%eax)
 709:	00 00                	add    %al,(%eax)
 70b:	00 2e                	add    %ch,(%esi)
 70d:	00 00                	add    %al,(%eax)
 70f:	00 c0                	add    %al,%al
 711:	02 00                	add    (%eax),%al
 713:	00 00                	add    %al,(%eax)
 715:	00 00                	add    %al,(%eax)
 717:	00 44 00 99          	add    %al,-0x67(%eax,%eax,1)
	...
 723:	00 44 00 9a          	add    %al,-0x66(%eax,%eax,1)
 727:	00 06                	add    %al,(%esi)
 729:	00 00                	add    %al,(%eax)
 72b:	00 00                	add    %al,(%eax)
 72d:	00 00                	add    %al,(%eax)
 72f:	00 44 00 9c          	add    %al,-0x64(%eax,%eax,1)
 733:	00 08                	add    %cl,(%eax)
 735:	00 00                	add    %al,(%eax)
 737:	00 00                	add    %al,(%eax)
 739:	00 00                	add    %al,(%eax)
 73b:	00 44 00 9a          	add    %al,-0x66(%eax,%eax,1)
 73f:	00 29                	add    %ch,(%ecx)
 741:	00 00                	add    %al,(%eax)
 743:	00 00                	add    %al,(%eax)
 745:	00 00                	add    %al,(%eax)
 747:	00 44 00 9e          	add    %al,-0x62(%eax,%eax,1)
 74b:	00 33                	add    %dh,(%ebx)
 74d:	00 00                	add    %al,(%eax)
 74f:	00 00                	add    %al,(%eax)
 751:	00 00                	add    %al,(%eax)
 753:	00 24 00             	add    %ah,(%eax,%eax,1)
 756:	00 00                	add    %al,(%eax)
 758:	36 00 00             	add    %al,%ss:(%eax)
 75b:	00 00                	add    %al,(%eax)
 75d:	00 00                	add    %al,(%eax)
 75f:	00 4e 00             	add    %cl,0x0(%esi)
 762:	00 00                	add    %al,(%eax)
 764:	f6 02 00             	testb  $0x0,(%edx)
 767:	00 52 07             	add    %dl,0x7(%edx)
 76a:	00 00                	add    %al,(%eax)
 76c:	24 00                	and    $0x0,%al
 76e:	a0 00 00 00 00       	mov    0x0,%al
 773:	00 6c 07 00          	add    %ch,0x0(%edi,%eax,1)
 777:	00 a0 00 a0 00 08    	add    %ah,0x800a000(%eax)
 77d:	00 00                	add    %al,(%eax)
 77f:	00 75 07             	add    %dh,0x7(%ebp)
 782:	00 00                	add    %al,(%eax)
 784:	a0 00 a0 00 0c       	mov    0xc00a000,%al
 789:	00 00                	add    %al,(%eax)
 78b:	00 81 07 00 00 a0    	add    %al,-0x5ffffff9(%ecx)
 791:	00 a0 00 10 00 00    	add    %ah,0x1000(%eax)
 797:	00 00                	add    %al,(%eax)
 799:	00 00                	add    %al,(%eax)
 79b:	00 2e                	add    %ch,(%esi)
 79d:	00 00                	add    %al,(%eax)
 79f:	00 f6                	add    %dh,%dh
 7a1:	02 00                	add    (%eax),%al
 7a3:	00 00                	add    %al,(%eax)
 7a5:	00 00                	add    %al,(%eax)
 7a7:	00 44 00 a1          	add    %al,-0x5f(%eax,%eax,1)
	...
 7b3:	00 44 00 a3          	add    %al,-0x5d(%eax,%eax,1)
 7b7:	00 06                	add    %al,(%esi)
 7b9:	00 00                	add    %al,(%eax)
 7bb:	00 00                	add    %al,(%eax)
 7bd:	00 00                	add    %al,(%eax)
 7bf:	00 44 00 a6          	add    %al,-0x5a(%eax,%eax,1)
 7c3:	00 10                	add    %dl,(%eax)
 7c5:	00 00                	add    %al,(%eax)
 7c7:	00 00                	add    %al,(%eax)
 7c9:	00 00                	add    %al,(%eax)
 7cb:	00 44 00 a8          	add    %al,-0x58(%eax,%eax,1)
 7cf:	00 14 00             	add    %dl,(%eax,%eax,1)
 7d2:	00 00                	add    %al,(%eax)
 7d4:	00 00                	add    %al,(%eax)
 7d6:	00 00                	add    %al,(%eax)
 7d8:	44                   	inc    %esp
 7d9:	00 aa 00 29 00 00    	add    %ch,0x2900(%edx)
 7df:	00 00                	add    %al,(%eax)
 7e1:	00 00                	add    %al,(%eax)
 7e3:	00 44 00 ac          	add    %al,-0x54(%eax,%eax,1)
 7e7:	00 2f                	add    %ch,(%edi)
 7e9:	00 00                	add    %al,(%eax)
 7eb:	00 00                	add    %al,(%eax)
 7ed:	00 00                	add    %al,(%eax)
 7ef:	00 44 00 b2          	add    %al,-0x4e(%eax,%eax,1)
 7f3:	00 47 00             	add    %al,0x0(%edi)
 7f6:	00 00                	add    %al,(%eax)
 7f8:	00 00                	add    %al,(%eax)
 7fa:	00 00                	add    %al,(%eax)
 7fc:	44                   	inc    %esp
 7fd:	00 b3 00 50 00 00    	add    %dh,0x5000(%ebx)
 803:	00 00                	add    %al,(%eax)
 805:	00 00                	add    %al,(%eax)
 807:	00 44 00 b4          	add    %al,-0x4c(%eax,%eax,1)
 80b:	00 6c 00 00          	add    %ch,0x0(%eax,%eax,1)
 80f:	00 00                	add    %al,(%eax)
 811:	00 00                	add    %al,(%eax)
 813:	00 44 00 b0          	add    %al,-0x50(%eax,%eax,1)
 817:	00 70 00             	add    %dh,0x0(%eax)
 81a:	00 00                	add    %al,(%eax)
 81c:	00 00                	add    %al,(%eax)
 81e:	00 00                	add    %al,(%eax)
 820:	44                   	inc    %esp
 821:	00 b7 00 76 00 00    	add    %dh,0x7600(%edi)
 827:	00 00                	add    %al,(%eax)
 829:	00 00                	add    %al,(%eax)
 82b:	00 44 00 b9          	add    %al,-0x47(%eax,%eax,1)
 82f:	00 86 00 00 00 00    	add    %al,0x0(%esi)
 835:	00 00                	add    %al,(%eax)
 837:	00 44 00 b7          	add    %al,-0x49(%eax,%eax,1)
 83b:	00 97 00 00 00 00    	add    %dl,0x0(%edi)
 841:	00 00                	add    %al,(%eax)
 843:	00 44 00 b7          	add    %al,-0x49(%eax,%eax,1)
 847:	00 ab 00 00 00 00    	add    %ch,0x0(%ebx)
 84d:	00 00                	add    %al,(%eax)
 84f:	00 44 00 bb          	add    %al,-0x45(%eax,%eax,1)
 853:	00 b4 00 00 00 00 00 	add    %dh,0x0(%eax,%eax,1)
 85a:	00 00                	add    %al,(%eax)
 85c:	44                   	inc    %esp
 85d:	00 bc 00 bd 00 00 00 	add    %bh,0xbd(%eax,%eax,1)
 864:	00 00                	add    %al,(%eax)
 866:	00 00                	add    %al,(%eax)
 868:	44                   	inc    %esp
 869:	00 bd 00 d2 00 00    	add    %bh,0xd200(%ebp)
 86f:	00 8d 07 00 00 80    	add    %cl,-0x7ffffff9(%ebp)
 875:	00 a3 00 f1 ff ff    	add    %ah,-0xf00(%ebx)
 87b:	ff ca                	dec    %edx
 87d:	07                   	pop    %es
 87e:	00 00                	add    %al,(%eax)
 880:	80 00 a4             	addb   $0xa4,(%eax)
 883:	00 e9                	add    %ch,%cl
 885:	ff                   	(bad)  
 886:	ff                   	(bad)  
 887:	ff                   	(bad)  
 888:	ef                   	out    %eax,(%dx)
 889:	07                   	pop    %es
 88a:	00 00                	add    %al,(%eax)
 88c:	80 00 a5             	addb   $0xa5,(%eax)
 88f:	00 e1                	add    %ah,%cl
 891:	ff                   	(bad)  
 892:	ff                   	(bad)  
 893:	ff                   	(bad)  
 894:	fd                   	std    
 895:	07                   	pop    %es
 896:	00 00                	add    %al,(%eax)
 898:	80 00 a6             	addb   $0xa6,(%eax)
 89b:	00 f7                	add    %dh,%bh
 89d:	ff                   	(bad)  
 89e:	ff                   	(bad)  
 89f:	ff 07                	incl   (%edi)
 8a1:	08 00                	or     %al,(%eax)
 8a3:	00 80 00 b6 00 f6    	add    %al,-0x9ff4a00(%eax)
 8a9:	ff                   	(bad)  
 8aa:	ff                   	(bad)  
 8ab:	ff 0f                	decl   (%edi)
 8ad:	08 00                	or     %al,(%eax)
 8af:	00 80 00 b6 00 f5    	add    %al,-0xaff4a00(%eax)
 8b5:	ff                   	(bad)  
 8b6:	ff                   	(bad)  
 8b7:	ff 00                	incl   (%eax)
 8b9:	00 00                	add    %al,(%eax)
 8bb:	00 c0                	add    %al,%al
 8bd:	00 00                	add    %al,(%eax)
 8bf:	00 00                	add    %al,(%eax)
 8c1:	00 00                	add    %al,(%eax)
 8c3:	00 17                	add    %dl,(%edi)
 8c5:	08 00                	or     %al,(%eax)
 8c7:	00 80 00 b2 00 f4    	add    %al,-0xbff4e00(%eax)
 8cd:	ff                   	(bad)  
 8ce:	ff                   	(bad)  
 8cf:	ff 00                	incl   (%eax)
 8d1:	00 00                	add    %al,(%eax)
 8d3:	00 c0                	add    %al,%al
 8d5:	00 00                	add    %al,(%eax)
 8d7:	00 47 00             	add    %al,0x0(%edi)
 8da:	00 00                	add    %al,(%eax)
 8dc:	00 00                	add    %al,(%eax)
 8de:	00 00                	add    %al,(%eax)
 8e0:	e0 00                	loopne 8e2 <.stab+0x8e2>
 8e2:	00 00                	add    %al,(%eax)
 8e4:	70 00                	jo     8e6 <.stab+0x8e6>
 8e6:	00 00                	add    %al,(%eax)
 8e8:	00 00                	add    %al,(%eax)
 8ea:	00 00                	add    %al,(%eax)
 8ec:	e0 00                	loopne 8ee <.stab+0x8ee>
 8ee:	00 00                	add    %al,(%eax)
 8f0:	d4 00                	aam    $0x0
 8f2:	00 00                	add    %al,(%eax)
 8f4:	00 00                	add    %al,(%eax)
 8f6:	00 00                	add    %al,(%eax)
 8f8:	24 00                	and    $0x0,%al
 8fa:	00 00                	add    %al,(%eax)
 8fc:	d4 00                	aam    $0x0
 8fe:	00 00                	add    %al,(%eax)
 900:	00 00                	add    %al,(%eax)
 902:	00 00                	add    %al,(%eax)
 904:	4e                   	dec    %esi
 905:	00 00                	add    %al,(%eax)
 907:	00 ca                	add    %cl,%dl
 909:	03 00                	add    (%eax),%eax
 90b:	00 23                	add    %ah,(%ebx)
 90d:	08 00                	or     %al,(%eax)
 90f:	00 24 00             	add    %ah,(%eax,%eax,1)
 912:	bf 00 00 00 00       	mov    $0x0,%edi
 917:	00 3d 08 00 00 a0    	add    %bh,0xa0000008
 91d:	00 bf 00 08 00 00    	add    %bh,0x800(%edi)
 923:	00 46 08             	add    %al,0x8(%esi)
 926:	00 00                	add    %al,(%eax)
 928:	a0 00 bf 00 0c       	mov    0xc00bf00,%al
 92d:	00 00                	add    %al,(%eax)
 92f:	00 52 08             	add    %dl,0x8(%edx)
 932:	00 00                	add    %al,(%eax)
 934:	a0 00 bf 00 10       	mov    0x1000bf00,%al
 939:	00 00                	add    %al,(%eax)
 93b:	00 00                	add    %al,(%eax)
 93d:	00 00                	add    %al,(%eax)
 93f:	00 2e                	add    %ch,(%esi)
 941:	00 00                	add    %al,(%eax)
 943:	00 ca                	add    %cl,%dl
 945:	03 00                	add    (%eax),%eax
 947:	00 00                	add    %al,(%eax)
 949:	00 00                	add    %al,(%eax)
 94b:	00 44 00 c0          	add    %al,-0x40(%eax,%eax,1)
	...
 957:	00 44 00 c4          	add    %al,-0x3c(%eax,%eax,1)
 95b:	00 06                	add    %al,(%esi)
 95d:	00 00                	add    %al,(%eax)
 95f:	00 00                	add    %al,(%eax)
 961:	00 00                	add    %al,(%eax)
 963:	00 44 00 c6          	add    %al,-0x3a(%eax,%eax,1)
 967:	00 0a                	add    %cl,(%edx)
 969:	00 00                	add    %al,(%eax)
 96b:	00 00                	add    %al,(%eax)
 96d:	00 00                	add    %al,(%eax)
 96f:	00 44 00 c8          	add    %al,-0x38(%eax,%eax,1)
 973:	00 10                	add    %dl,(%eax)
 975:	00 00                	add    %al,(%eax)
 977:	00 00                	add    %al,(%eax)
 979:	00 00                	add    %al,(%eax)
 97b:	00 44 00 ce          	add    %al,-0x32(%eax,%eax,1)
 97f:	00 28                	add    %ch,(%eax)
 981:	00 00                	add    %al,(%eax)
 983:	00 00                	add    %al,(%eax)
 985:	00 00                	add    %al,(%eax)
 987:	00 44 00 cf          	add    %al,-0x31(%eax,%eax,1)
 98b:	00 47 00             	add    %al,0x0(%edi)
 98e:	00 00                	add    %al,(%eax)
 990:	00 00                	add    %al,(%eax)
 992:	00 00                	add    %al,(%eax)
 994:	44                   	inc    %esp
 995:	00 d0                	add    %dl,%al
 997:	00 63 00             	add    %ah,0x0(%ebx)
 99a:	00 00                	add    %al,(%eax)
 99c:	00 00                	add    %al,(%eax)
 99e:	00 00                	add    %al,(%eax)
 9a0:	44                   	inc    %esp
 9a1:	00 cc                	add    %cl,%ah
 9a3:	00 75 00             	add    %dh,0x0(%ebp)
 9a6:	00 00                	add    %al,(%eax)
 9a8:	00 00                	add    %al,(%eax)
 9aa:	00 00                	add    %al,(%eax)
 9ac:	44                   	inc    %esp
 9ad:	00 d3                	add    %dl,%bl
 9af:	00 7b 00             	add    %bh,0x0(%ebx)
 9b2:	00 00                	add    %al,(%eax)
 9b4:	00 00                	add    %al,(%eax)
 9b6:	00 00                	add    %al,(%eax)
 9b8:	44                   	inc    %esp
 9b9:	00 d5                	add    %dl,%ch
 9bb:	00 8b 00 00 00 00    	add    %cl,0x0(%ebx)
 9c1:	00 00                	add    %al,(%eax)
 9c3:	00 44 00 d3          	add    %al,-0x2d(%eax,%eax,1)
 9c7:	00 9c 00 00 00 00 00 	add    %bl,0x0(%eax,%eax,1)
 9ce:	00 00                	add    %al,(%eax)
 9d0:	44                   	inc    %esp
 9d1:	00 d3                	add    %dl,%bl
 9d3:	00 b0 00 00 00 00    	add    %dh,0x0(%eax)
 9d9:	00 00                	add    %al,(%eax)
 9db:	00 44 00 d7          	add    %al,-0x29(%eax,%eax,1)
 9df:	00 b9 00 00 00 00    	add    %bh,0x0(%ecx)
 9e5:	00 00                	add    %al,(%eax)
 9e7:	00 44 00 d8          	add    %al,-0x28(%eax,%eax,1)
 9eb:	00 c2                	add    %al,%dl
 9ed:	00 00                	add    %al,(%eax)
 9ef:	00 00                	add    %al,(%eax)
 9f1:	00 00                	add    %al,(%eax)
 9f3:	00 44 00 d9          	add    %al,-0x27(%eax,%eax,1)
 9f7:	00 d7                	add    %dl,%bh
 9f9:	00 00                	add    %al,(%eax)
 9fb:	00 5e 08             	add    %bl,0x8(%esi)
 9fe:	00 00                	add    %al,(%eax)
 a00:	80 00 c2             	addb   $0xc2,(%eax)
 a03:	00 ea                	add    %ch,%dl
 a05:	ff                   	(bad)  
 a06:	ff                   	(bad)  
 a07:	ff 83 08 00 00 80    	incl   -0x7ffffff8(%ebx)
 a0d:	00 c3                	add    %al,%bl
 a0f:	00 e0                	add    %ah,%al
 a11:	ff                   	(bad)  
 a12:	ff                   	(bad)  
 a13:	ff 91 08 00 00 80    	call   *-0x7ffffff8(%ecx)
 a19:	00 c4                	add    %al,%ah
 a1b:	00 f7                	add    %dh,%bh
 a1d:	ff                   	(bad)  
 a1e:	ff                   	(bad)  
 a1f:	ff 9b 08 00 00 80    	lcall  *-0x7ffffff8(%ebx)
 a25:	00 d2                	add    %dl,%dl
 a27:	00 f6                	add    %dh,%dh
 a29:	ff                   	(bad)  
 a2a:	ff                   	(bad)  
 a2b:	ff a3 08 00 00 80    	jmp    *-0x7ffffff8(%ebx)
 a31:	00 d2                	add    %dl,%dl
 a33:	00 f5                	add    %dh,%ch
 a35:	ff                   	(bad)  
 a36:	ff                   	(bad)  
 a37:	ff 00                	incl   (%eax)
 a39:	00 00                	add    %al,(%eax)
 a3b:	00 c0                	add    %al,%al
 a3d:	00 00                	add    %al,(%eax)
 a3f:	00 00                	add    %al,(%eax)
 a41:	00 00                	add    %al,(%eax)
 a43:	00 ab 08 00 00 80    	add    %ch,-0x7ffffff8(%ebx)
 a49:	00 ce                	add    %cl,%dh
 a4b:	00 f4                	add    %dh,%ah
 a4d:	ff                   	(bad)  
 a4e:	ff                   	(bad)  
 a4f:	ff 00                	incl   (%eax)
 a51:	00 00                	add    %al,(%eax)
 a53:	00 c0                	add    %al,%al
 a55:	00 00                	add    %al,(%eax)
 a57:	00 28                	add    %ch,(%eax)
 a59:	00 00                	add    %al,(%eax)
 a5b:	00 00                	add    %al,(%eax)
 a5d:	00 00                	add    %al,(%eax)
 a5f:	00 e0                	add    %ah,%al
 a61:	00 00                	add    %al,(%eax)
 a63:	00 75 00             	add    %dh,0x0(%ebp)
 a66:	00 00                	add    %al,(%eax)
 a68:	00 00                	add    %al,(%eax)
 a6a:	00 00                	add    %al,(%eax)
 a6c:	e0 00                	loopne a6e <.stab+0xa6e>
 a6e:	00 00                	add    %al,(%eax)
 a70:	d9 00                	flds   (%eax)
 a72:	00 00                	add    %al,(%eax)
 a74:	00 00                	add    %al,(%eax)
 a76:	00 00                	add    %al,(%eax)
 a78:	24 00                	and    $0x0,%al
 a7a:	00 00                	add    %al,(%eax)
 a7c:	d9 00                	flds   (%eax)
 a7e:	00 00                	add    %al,(%eax)
 a80:	00 00                	add    %al,(%eax)
 a82:	00 00                	add    %al,(%eax)
 a84:	4e                   	dec    %esi
 a85:	00 00                	add    %al,(%eax)
 a87:	00 a3 04 00 00 b7    	add    %ah,-0x48fffffc(%ebx)
 a8d:	08 00                	or     %al,(%eax)
 a8f:	00 26                	add    %ah,(%esi)
 a91:	00 17                	add    %dl,(%edi)
 a93:	00 00                	add    %al,(%eax)
 a95:	00 00                	add    %al,(%eax)
 a97:	00 d3                	add    %dl,%bl
 a99:	08 00                	or     %al,(%eax)
 a9b:	00 26                	add    %ah,(%esi)
 a9d:	00 1a                	add    %bl,(%edx)
 a9f:	00 00                	add    %al,(%eax)
 aa1:	00 00                	add    %al,(%eax)
 aa3:	00 e3                	add    %ah,%bl
 aa5:	08 00                	or     %al,(%eax)
 aa7:	00 26                	add    %ah,(%esi)
 aa9:	00 1b                	add    %bl,(%ebx)
 aab:	00 01                	add    %al,(%ecx)
 aad:	00 00                	add    %al,(%eax)
 aaf:	00 f3                	add    %dh,%bl
 ab1:	08 00                	or     %al,(%eax)
 ab3:	00 26                	add    %ah,(%esi)
 ab5:	00 1c 00             	add    %bl,(%eax,%eax,1)
 ab8:	04 00                	add    $0x0,%al
 aba:	00 00                	add    %al,(%eax)
 abc:	17                   	pop    %ss
 abd:	09 00                	or     %eax,(%eax)
 abf:	00 26                	add    %ah,(%esi)
 ac1:	00 1d 00 18 00 00    	add    %bl,0x1800
 ac7:	00 00                	add    %al,(%eax)
 ac9:	00 00                	add    %al,(%eax)
 acb:	00 64 00 00          	add    %ah,0x0(%eax,%eax,1)
 acf:	00                   	.byte 0x0
 ad0:	a3                   	.byte 0xa3
 ad1:	04 00                	add    $0x0,%al
	...

Disassembly of section .stabstr:

00000000 <.stabstr>:
static uint8_t hex_set[]="0123456789ABCDEF";
static uint8_t dec_set[]="0123456789";

//移动光标
static void move_cursor()
{
   0:	00 63 6f             	add    %ah,0x6f(%ebx)
   3:	6e                   	outsb  %ds:(%esi),(%dx)
   4:	73 6f                	jae    75 <.stabstr+0x75>
	//屏幕宽80高25,80*25
	uint16_t cursorLocation=cursor_y*80+cursor_x;
   6:	6c                   	insb   (%dx),%es:(%edi)
   7:	65 2e 63 00          	gs arpl %ax,%cs:(%eax)
   b:	2f                   	das    
   c:	68 6f 6d 65 2f       	push   $0x2f656d6f
  11:	64 74 6c             	fs je  80 <.stabstr+0x80>
  14:	2f                   	das    
  15:	68 75 72 6c 65       	push   $0x656c7275
  1a:	78 2f                	js     4b <.stabstr+0x4b>
  1c:	00 64 72 69          	add    %ah,0x69(%edx,%esi,2)
  20:	76 65                	jbe    87 <.stabstr+0x87>
  22:	72 73                	jb     97 <.stabstr+0x97>
  24:	2f                   	das    
  25:	63 6f 6e             	arpl   %bp,0x6e(%edi)
  28:	73 6f                	jae    99 <.stabstr+0x99>
  2a:	6c                   	insb   (%dx),%es:(%edi)
  2b:	65 2e 63 00          	gs arpl %ax,%cs:(%eax)
	** 向它写入一个值来指定内部的某个寄存器
	** 光标寄存器的索引值分别是14和15,
	** 分别存储光标位置的高8位和低8位
	** 可以通过端口0x3d5对其内容进行读写
	*/
	outb(0x3d4,14);					//准备设置光标的高8位
  2f:	67 63 63 32          	arpl   %sp,0x32(%bp,%di)
  33:	5f                   	pop    %edi
  34:	63 6f 6d             	arpl   %bp,0x6d(%edi)
  37:	70 69                	jo     a2 <.stabstr+0xa2>
  39:	6c                   	insb   (%dx),%es:(%edi)
  3a:	65 64 2e 00 69 6e    	gs fs add %ch,%cs:0x6e(%ecx)
	outb(0x3d5,cursorLocation>>8);	//设置光标高8位
  40:	74 3a                	je     7c <.stabstr+0x7c>
  42:	74 28                	je     6c <.stabstr+0x6c>
  44:	30 2c 31             	xor    %ch,(%ecx,%esi,1)
  47:	29 3d 72 28 30 2c    	sub    %edi,0x2c302872
  4d:	31 29                	xor    %ebp,(%ecx)
  4f:	3b 2d 32 31 34 37    	cmp    0x37343132,%ebp
  55:	34 38                	xor    $0x38,%al
  57:	33 36                	xor    (%esi),%esi
  59:	34 38                	xor    $0x38,%al
	outb(0x3d4,15);					//准备设置光标的低8位
  5b:	3b 32                	cmp    (%edx),%esi
  5d:	31 34 37             	xor    %esi,(%edi,%esi,1)
  60:	34 38                	xor    $0x38,%al
  62:	33 36                	xor    (%esi),%esi
  64:	34 37                	xor    $0x37,%al
  66:	3b 00                	cmp    (%eax),%eax
  68:	63 68 61             	arpl   %bp,0x61(%eax)
  6b:	72 3a                	jb     a7 <.stabstr+0xa7>
	outb(0x3d5,cursorLocation);		//设置光标低8位
  6d:	74 28                	je     97 <.stabstr+0x97>
  6f:	30 2c 32             	xor    %ch,(%edx,%esi,1)
  72:	29 3d 72 28 30 2c    	sub    %edi,0x2c302872
  78:	32 29                	xor    (%ecx),%ch
  7a:	3b 30                	cmp    (%eax),%esi
  7c:	3b 31                	cmp    (%ecx),%esi
  7e:	32 37                	xor    (%edi),%dh
  80:	3b 00                	cmp    (%eax),%eax
  82:	6c                   	insb   (%dx),%es:(%edi)
  83:	6f                   	outsl  %ds:(%esi),(%dx)
}
  84:	6e                   	outsb  %ds:(%esi),(%dx)
  85:	67 20 69 6e          	and    %ch,0x6e(%bx,%di)

//清屏
void console_clear()
{
  89:	74 3a                	je     c5 <.stabstr+0xc5>
  8b:	74 28                	je     b5 <.stabstr+0xb5>
	uint8_t attribute_byte=0x07; //黑底白字
  8d:	30 2c 33             	xor    %ch,(%ebx,%esi,1)
  90:	29 3d 72 28 30 2c    	sub    %edi,0x2c302872
	uint16_t blank=0x20 | (attribute_byte << 8); //一个字，表示黑底白字的空格，用来清屏
  96:	33 29                	xor    (%ecx),%ebp
  98:	3b 2d 32 31 34 37    	cmp    0x37343132,%ebp
  9e:	34 38                	xor    $0x38,%al
	
	int i;
	for (i=0;i<80*25;i++)
  a0:	33 36                	xor    (%esi),%esi
  a2:	34 38                	xor    $0x38,%al
  a4:	3b 32                	cmp    (%edx),%esi
  a6:	31 34 37             	xor    %esi,(%edi,%esi,1)
	{
		video_memory[i]=blank;
  a9:	34 38                	xor    $0x38,%al
  ab:	33 36                	xor    (%esi),%esi
  ad:	34 37                	xor    $0x37,%al
  af:	3b 00                	cmp    (%eax),%eax
  b1:	75 6e                	jne    121 <.stabstr+0x121>
  b3:	73 69                	jae    11e <.stabstr+0x11e>
  b5:	67 6e                	outsb  %ds:(%si),(%dx)
  b7:	65 64 20 69 6e       	gs and %ch,%fs:0x6e(%ecx)
{
	uint8_t attribute_byte=0x07; //黑底白字
	uint16_t blank=0x20 | (attribute_byte << 8); //一个字，表示黑底白字的空格，用来清屏
	
	int i;
	for (i=0;i<80*25;i++)
  bc:	74 3a                	je     f8 <.stabstr+0xf8>
  be:	74 28                	je     e8 <.stabstr+0xe8>
  c0:	30 2c 34             	xor    %ch,(%esp,%esi,1)
  c3:	29 3d 72 28 30 2c    	sub    %edi,0x2c302872
	{
		video_memory[i]=blank;
	}

	cursor_x=0;
  c9:	34 29                	xor    $0x29,%al
  cb:	3b 30                	cmp    (%eax),%esi
  cd:	3b 30                	cmp    (%eax),%esi
	cursor_y=0;
  cf:	33 37                	xor    (%edi),%esi
  d1:	37                   	aaa    
  d2:	37                   	aaa    
  d3:	37                   	aaa    
  d4:	37                   	aaa    
  d5:	37                   	aaa    
	move_cursor();
  d6:	37                   	aaa    
  d7:	37                   	aaa    
  d8:	37                   	aaa    
  d9:	37                   	aaa    
  da:	3b 00                	cmp    (%eax),%eax
}
  dc:	6c                   	insb   (%dx),%es:(%edi)
  dd:	6f                   	outsl  %ds:(%esi),(%dx)

//滚屏
static void scroll()
{
  de:	6e                   	outsb  %ds:(%esi),(%dx)
  df:	67 20 75 6e          	and    %dh,0x6e(%di)
  e3:	73 69                	jae    14e <.stabstr+0x14e>
	/* 滚屏很简单，把前24行一次向前挪动一行
	** 最后一行用黑底白字的空格填充 */
	uint8_t attribute_byte=0x07;
  e5:	67 6e                	outsb  %ds:(%si),(%dx)
  e7:	65 64 20 69 6e       	gs and %ch,%fs:0x6e(%ecx)
	uint16_t blank=0x20 | (attribute_byte << 8);
  ec:	74 3a                	je     128 <.stabstr+0x128>
  ee:	74 28                	je     118 <.stabstr+0x118>
  f0:	30 2c 35 29 3d 72 28 	xor    %ch,0x28723d29(,%esi,1)

	//cursor_y超过或者等于25时候需要滚屏
	if(cursor_y>=25)
  f7:	30 2c 35 29 3b 30 3b 	xor    %ch,0x3b303b29(,%esi,1)
  fe:	30 33                	xor    %dh,(%ebx)
 100:	37                   	aaa    
	{
		int i;
		//除了第一行的每一行往前一行覆盖
		for (i=0;i<24*80;i++)
 101:	37                   	aaa    
 102:	37                   	aaa    
 103:	37                   	aaa    
 104:	37                   	aaa    
 105:	37                   	aaa    
 106:	37                   	aaa    
 107:	37                   	aaa    
 108:	37                   	aaa    
 109:	37                   	aaa    
		{
			video_memory[i]=video_memory[i+80];
 10a:	3b 00                	cmp    (%eax),%eax
 10c:	5f                   	pop    %edi
 10d:	5f                   	pop    %edi
 10e:	69 6e 74 31 32 38 3a 	imul   $0x3a383231,0x74(%esi),%ebp
 115:	74 28                	je     13f <.stabstr+0x13f>
 117:	30 2c 36             	xor    %ch,(%esi,%esi,1)
 11a:	29 3d 40 73 31 32    	sub    %edi,0x32317340
 120:	38 3b                	cmp    %bh,(%ebx)
 122:	72 28                	jb     14c <.stabstr+0x14c>
 124:	30 2c 36             	xor    %ch,(%esi,%esi,1)
 127:	29 3b                	sub    %edi,(%ebx)
 129:	30 32                	xor    %dh,(%edx)
	//cursor_y超过或者等于25时候需要滚屏
	if(cursor_y>=25)
	{
		int i;
		//除了第一行的每一行往前一行覆盖
		for (i=0;i<24*80;i++)
 12b:	30 30                	xor    %dh,(%eax)
 12d:	30 30                	xor    %dh,(%eax)
 12f:	30 30                	xor    %dh,(%eax)
 131:	30 30                	xor    %dh,(%eax)
 133:	30 30                	xor    %dh,(%eax)
 135:	30 30                	xor    %dh,(%eax)
 137:	30 30                	xor    %dh,(%eax)
		{
			video_memory[i]=video_memory[i+80];
		}
		//最后一行填充
		for(i=24*80;i<25*80;i++)
 139:	30 30                	xor    %dh,(%eax)
 13b:	30 30                	xor    %dh,(%eax)
 13d:	30 30                	xor    %dh,(%eax)
 13f:	30 30                	xor    %dh,(%eax)
		{
			video_memory[i]=blank;
 141:	30 30                	xor    %dh,(%eax)
 143:	30 30                	xor    %dh,(%eax)
 145:	30 30                	xor    %dh,(%eax)
 147:	30 30                	xor    %dh,(%eax)
 149:	30 30                	xor    %dh,(%eax)
 14b:	30 30                	xor    %dh,(%eax)
 14d:	30 30                	xor    %dh,(%eax)
 14f:	30 30                	xor    %dh,(%eax)
 151:	30 30                	xor    %dh,(%eax)
 153:	30 30                	xor    %dh,(%eax)
		for (i=0;i<24*80;i++)
		{
			video_memory[i]=video_memory[i+80];
		}
		//最后一行填充
		for(i=24*80;i<25*80;i++)
 155:	3b 30                	cmp    (%eax),%esi
 157:	31 37                	xor    %esi,(%edi)
 159:	37                   	aaa    
 15a:	37                   	aaa    
 15b:	37                   	aaa    
 15c:	37                   	aaa    
 15d:	37                   	aaa    
 15e:	37                   	aaa    
 15f:	37                   	aaa    
 160:	37                   	aaa    
		{
			video_memory[i]=blank;
		}
		//重置cursor_y
		cursor_y=24;
 161:	37                   	aaa    
 162:	37                   	aaa    
 163:	37                   	aaa    
 164:	37                   	aaa    
 165:	37                   	aaa    
 166:	37                   	aaa    
 167:	37                   	aaa    
	}
}
 168:	37                   	aaa    
 169:	37                   	aaa    
 16a:	37                   	aaa    

//显示字符
void console_putc_color(char c, real_color_t back,real_color_t fore)
{
 16b:	37                   	aaa    
 16c:	37                   	aaa    
 16d:	37                   	aaa    
 16e:	37                   	aaa    
 16f:	37                   	aaa    
 170:	37                   	aaa    
 171:	37                   	aaa    
 172:	37                   	aaa    
 173:	37                   	aaa    
 174:	37                   	aaa    
 175:	37                   	aaa    
 176:	37                   	aaa    
	uint8_t back_color=(uint8_t)back;
 177:	37                   	aaa    
 178:	37                   	aaa    
 179:	37                   	aaa    
 17a:	37                   	aaa    
 17b:	37                   	aaa    
 17c:	37                   	aaa    
	uint8_t fore_color=(uint8_t)fore;
 17d:	37                   	aaa    
 17e:	37                   	aaa    
 17f:	37                   	aaa    
 180:	37                   	aaa    
 181:	37                   	aaa    
 182:	3b 00                	cmp    (%eax),%eax

	uint8_t attribute_byte=(back_color << 4) | (fore_color & 0x0f);
 184:	5f                   	pop    %edi
 185:	5f                   	pop    %edi
 186:	69 6e 74 31 32 38 20 	imul   $0x20383231,0x74(%esi),%ebp
 18d:	75 6e                	jne    1fd <.stabstr+0x1fd>
 18f:	73 69                	jae    1fa <.stabstr+0x1fa>
 191:	67 6e                	outsb  %ds:(%si),(%dx)
 193:	65 64 3a 74 28 30    	gs cmp %fs:0x30(%eax,%ebp,1),%dh
	uint16_t attribute = attribute_byte<<8;
 199:	2c 37                	sub    $0x37,%al
 19b:	29 3d 40 73 31 32    	sub    %edi,0x32317340
 1a1:	38 3b                	cmp    %bh,(%ebx)

	//0x08是退格键的ASCII码
	//0x09是TAB键的ASCII码
	if (c==0x08 && cursor_x)
 1a3:	72 28                	jb     1cd <.stabstr+0x1cd>
 1a5:	30 2c 37             	xor    %ch,(%edi,%esi,1)
 1a8:	29 3b                	sub    %edi,(%ebx)
 1aa:	30 3b                	xor    %bh,(%ebx)
 1ac:	30 33                	xor    %dh,(%ebx)
 1ae:	37                   	aaa    
 1af:	37                   	aaa    
 1b0:	37                   	aaa    
 1b1:	37                   	aaa    
 1b2:	37                   	aaa    
 1b3:	37                   	aaa    
	{
		cursor_x--;
 1b4:	37                   	aaa    
 1b5:	37                   	aaa    
 1b6:	37                   	aaa    
 1b7:	37                   	aaa    
 1b8:	37                   	aaa    
 1b9:	37                   	aaa    
 1ba:	37                   	aaa    
 1bb:	37                   	aaa    
 1bc:	37                   	aaa    
 1bd:	37                   	aaa    
 1be:	37                   	aaa    
 1bf:	37                   	aaa    
 1c0:	37                   	aaa    
 1c1:	37                   	aaa    
 1c2:	37                   	aaa    
 1c3:	37                   	aaa    
 1c4:	37                   	aaa    
 1c5:	37                   	aaa    
 1c6:	37                   	aaa    
 1c7:	37                   	aaa    
	}
	else if (c==0x09)
 1c8:	37                   	aaa    
 1c9:	37                   	aaa    
 1ca:	37                   	aaa    
 1cb:	37                   	aaa    
 1cc:	37                   	aaa    
 1cd:	37                   	aaa    
	{
		cursor_x=(cursor_x+4) & ~(4-1);//这里设置tab长度为4，使其4对其
 1ce:	37                   	aaa    
 1cf:	37                   	aaa    
 1d0:	37                   	aaa    
 1d1:	37                   	aaa    
 1d2:	37                   	aaa    
 1d3:	37                   	aaa    
 1d4:	37                   	aaa    
 1d5:	37                   	aaa    
 1d6:	37                   	aaa    
 1d7:	37                   	aaa    
 1d8:	3b 00                	cmp    (%eax),%eax
 1da:	6c                   	insb   (%dx),%es:(%edi)
 1db:	6f                   	outsl  %ds:(%esi),(%dx)
 1dc:	6e                   	outsb  %ds:(%esi),(%dx)
 1dd:	67 20 6c 6f          	and    %ch,0x6f(%si)
 1e1:	6e                   	outsb  %ds:(%esi),(%dx)
	}
	else if (c=='\r')
 1e2:	67 20 69 6e          	and    %ch,0x6e(%bx,%di)
 1e6:	74 3a                	je     222 <.stabstr+0x222>
	{
		cursor_x=0;
 1e8:	74 28                	je     212 <.stabstr+0x212>
 1ea:	30 2c 38             	xor    %ch,(%eax,%edi,1)
 1ed:	29 3d 40 73 36 34    	sub    %edi,0x34367340
	}
	else if (c=='\n')
 1f3:	3b 72 28             	cmp    0x28(%edx),%esi
 1f6:	30 2c 38             	xor    %ch,(%eax,%edi,1)
	{
		cursor_x=0;
 1f9:	29 3b                	sub    %edi,(%ebx)
 1fb:	30 31                	xor    %dh,(%ecx)
 1fd:	30 30                	xor    %dh,(%eax)
		cursor_y++;
 1ff:	30 30                	xor    %dh,(%eax)
 201:	30 30                	xor    %dh,(%eax)
 203:	30 30                	xor    %dh,(%eax)
 205:	30 30                	xor    %dh,(%eax)
 207:	30 30                	xor    %dh,(%eax)
 209:	30 30                	xor    %dh,(%eax)
 20b:	30 30                	xor    %dh,(%eax)
 20d:	30 30                	xor    %dh,(%eax)
	}
	else if (c>=' ')
 20f:	30 30                	xor    %dh,(%eax)
 211:	30 3b                	xor    %bh,(%ebx)
 213:	30 30                	xor    %dh,(%eax)
	{
		video_memory[cursor_y*80+cursor_x] = c | attribute;
 215:	37                   	aaa    
 216:	37                   	aaa    
 217:	37                   	aaa    
 218:	37                   	aaa    
 219:	37                   	aaa    
 21a:	37                   	aaa    
 21b:	37                   	aaa    
 21c:	37                   	aaa    
 21d:	37                   	aaa    
 21e:	37                   	aaa    
 21f:	37                   	aaa    
 220:	37                   	aaa    
 221:	37                   	aaa    
 222:	37                   	aaa    
 223:	37                   	aaa    
 224:	37                   	aaa    
 225:	37                   	aaa    
 226:	37                   	aaa    
 227:	37                   	aaa    
 228:	37                   	aaa    
 229:	37                   	aaa    
 22a:	3b 00                	cmp    (%eax),%eax
 22c:	6c                   	insb   (%dx),%es:(%edi)
 22d:	6f                   	outsl  %ds:(%esi),(%dx)
 22e:	6e                   	outsb  %ds:(%esi),(%dx)
 22f:	67 20 6c 6f          	and    %ch,0x6f(%si)
 233:	6e                   	outsb  %ds:(%esi),(%dx)
 234:	67 20 75 6e          	and    %dh,0x6e(%di)
 238:	73 69                	jae    2a3 <.stabstr+0x2a3>
 23a:	67 6e                	outsb  %ds:(%si),(%dx)
 23c:	65 64 20 69 6e       	gs and %ch,%fs:0x6e(%ecx)
 241:	74 3a                	je     27d <.stabstr+0x27d>
 243:	74 28                	je     26d <.stabstr+0x26d>
 245:	30 2c 39             	xor    %ch,(%ecx,%edi,1)
 248:	29 3d 40 73 36 34    	sub    %edi,0x34367340
 24e:	3b 72 28             	cmp    0x28(%edx),%esi
		cursor_x++;
 251:	30 2c 39             	xor    %ch,(%ecx,%edi,1)
 254:	29 3b                	sub    %edi,(%ebx)
 256:	30 3b                	xor    %bh,(%ebx)
 258:	30 31                	xor    %dh,(%ecx)
 25a:	37                   	aaa    
 25b:	37                   	aaa    
 25c:	37                   	aaa    
 25d:	37                   	aaa    
	}
	//如果显示到达行尾(x>=80)则自动换行
	if (cursor_x >= 80)
 25e:	37                   	aaa    
 25f:	37                   	aaa    
 260:	37                   	aaa    
 261:	37                   	aaa    
 262:	37                   	aaa    
 263:	37                   	aaa    
 264:	37                   	aaa    
 265:	37                   	aaa    
 266:	37                   	aaa    
 267:	37                   	aaa    
 268:	37                   	aaa    
	{
		cursor_x=0;
 269:	37                   	aaa    
 26a:	37                   	aaa    
 26b:	37                   	aaa    
 26c:	37                   	aaa    
 26d:	37                   	aaa    
 26e:	37                   	aaa    
 26f:	3b 00                	cmp    (%eax),%eax
		cursor_y++;
 271:	73 68                	jae    2db <.stabstr+0x2db>
 273:	6f                   	outsl  %ds:(%esi),(%dx)
 274:	72 74                	jb     2ea <.stabstr+0x2ea>
 276:	20 69 6e             	and    %ch,0x6e(%ecx)
 279:	74 3a                	je     2b5 <.stabstr+0x2b5>
 27b:	74 28                	je     2a5 <.stabstr+0x2a5>
 27d:	30 2c 31             	xor    %ch,(%ecx,%esi,1)
	}
	//滚屏，需不需要留给函数自己判断
	scroll();
 280:	30 29                	xor    %ch,(%ecx)
 282:	3d 40 73 31 36       	cmp    $0x36317340,%eax

	//移动光标
	move_cursor();
 287:	3b 72 28             	cmp    0x28(%edx),%esi
}
 28a:	30 2c 31             	xor    %ch,(%ecx,%esi,1)

void console_write(char *cstr)
{
 28d:	30 29                	xor    %ch,(%ecx)
 28f:	3b 2d 33 32 37 36    	cmp    0x36373233,%ebp
	while(*cstr) 
	{
		console_putc_color(*cstr++,rc_black,rc_white);
 295:	38 3b                	cmp    %bh,(%ebx)
 297:	33 32                	xor    (%edx),%esi
 299:	37                   	aaa    
 29a:	36 37                	ss aaa 
 29c:	3b 00                	cmp    (%eax),%eax
 29e:	73 68                	jae    308 <.stabstr+0x308>
 2a0:	6f                   	outsl  %ds:(%esi),(%dx)
 2a1:	72 74                	jb     317 <.stabstr+0x317>
 2a3:	20 75 6e             	and    %dh,0x6e(%ebp)
 2a6:	73 69                	jae    311 <.stabstr+0x311>
 2a8:	67 6e                	outsb  %ds:(%si),(%dx)
 2aa:	65 64 20 69 6e       	gs and %ch,%fs:0x6e(%ecx)
 2af:	74 3a                	je     2eb <.stabstr+0x2eb>
 2b1:	74 28                	je     2db <.stabstr+0x2db>
	move_cursor();
}

void console_write(char *cstr)
{
	while(*cstr) 
 2b3:	30 2c 31             	xor    %ch,(%ecx,%esi,1)
 2b6:	31 29                	xor    %ebp,(%ecx)
 2b8:	3d 40 73 31 36       	cmp    $0x36317340,%eax
	{
		console_putc_color(*cstr++,rc_black,rc_white);
	}
}
 2bd:	3b 72 28             	cmp    0x28(%edx),%esi

void console_write_color(char *cstr,real_color_t back,real_color_t fore)
{
 2c0:	30 2c 31             	xor    %ch,(%ecx,%esi,1)
 2c3:	31 29                	xor    %ebp,(%ecx)
 2c5:	3b 30                	cmp    (%eax),%esi
	while(*cstr)
 2c7:	3b 36                	cmp    (%esi),%esi
	{
		console_putc_color(*cstr++,back,fore);
 2c9:	35 35 33 35 3b       	xor    $0x3b353335,%eax
 2ce:	00 73 69             	add    %dh,0x69(%ebx)
 2d1:	67 6e                	outsb  %ds:(%si),(%dx)
 2d3:	65 64 20 63 68       	gs and %ah,%fs:0x68(%ebx)
 2d8:	61                   	popa   
 2d9:	72 3a                	jb     315 <.stabstr+0x315>
 2db:	74 28                	je     305 <.stabstr+0x305>
 2dd:	30 2c 31             	xor    %ch,(%ecx,%esi,1)
 2e0:	32 29                	xor    (%ecx),%ch
 2e2:	3d 40 73 38 3b       	cmp    $0x3b387340,%eax
 2e7:	72 28                	jb     311 <.stabstr+0x311>
	}
}

void console_write_color(char *cstr,real_color_t back,real_color_t fore)
{
	while(*cstr)
 2e9:	30 2c 31             	xor    %ch,(%ecx,%esi,1)
 2ec:	32 29                	xor    (%ecx),%ch
 2ee:	3b 2d 31 32 38 3b    	cmp    0x3b383231,%ebp
	{
		console_putc_color(*cstr++,back,fore);
	}
}
 2f4:	31 32                	xor    %esi,(%edx)

void console_write_hex(uint32_t n, real_color_t back,real_color_t fore)
{
 2f6:	37                   	aaa    
 2f7:	3b 00                	cmp    (%eax),%eax
 2f9:	75 6e                	jne    369 <.stabstr+0x369>
 2fb:	73 69                	jae    366 <.stabstr+0x366>
	//32位数用16进制输出最多8位
	char hex_header[]="0x"; //输出十六进制数的格式0x
 2fd:	67 6e                	outsb  %ds:(%si),(%dx)
 2ff:	65 64 20 63 68       	gs and %ah,%fs:0x68(%ebx)
 304:	61                   	popa   
 305:	72 3a                	jb     341 <.stabstr+0x341>
	char hex_digits[8];		//存放16进制数的每一位，地位在前，高位在后；
	char result[8];			//存放最终结果，高位在前，低位在后
	uint8_t num=0;			//表示该数有几位（16进制）
 307:	74 28                	je     331 <.stabstr+0x331>
 309:	30 2c 31             	xor    %ch,(%ecx,%esi,1)
	
	console_write_color(hex_header,back,fore);
 30c:	33 29                	xor    (%ecx),%ebp
 30e:	3d 40 73 38 3b       	cmp    $0x3b387340,%eax
 313:	72 28                	jb     33d <.stabstr+0x33d>
 315:	30 2c 31             	xor    %ch,(%ecx,%esi,1)
 318:	33 29                	xor    (%ecx),%ebp
 31a:	3b 30                	cmp    (%eax),%esi
 31c:	3b 32                	cmp    (%edx),%esi
 31e:	35 35 3b 00 66       	xor    $0x66003b35,%eax

	if(n==0)				//如果是0直接输出0
 323:	6c                   	insb   (%dx),%es:(%edi)
 324:	6f                   	outsl  %ds:(%esi),(%dx)
	{
		console_putc_color('0',back,fore);
 325:	61                   	popa   
 326:	74 3a                	je     362 <.stabstr+0x362>
 328:	74 28                	je     352 <.stabstr+0x352>
 32a:	30 2c 31             	xor    %ch,(%ecx,%esi,1)
 32d:	34 29                	xor    $0x29,%al
 32f:	3d 72 28 30 2c       	cmp    $0x2c302872,%eax
 334:	31 29                	xor    %ebp,(%ecx)
 336:	3b 34 3b             	cmp    (%ebx,%edi,1),%esi
 339:	30 3b                	xor    %bh,(%ebx)
 33b:	00 64 6f 75          	add    %ah,0x75(%edi,%ebp,2)
		return;
	}

	while(n)				//循环，每次去除最低位放在hex_digits里边，并且让n除以16
	{
		char digit=n & (0xf);
 33f:	62 6c 65 3a          	bound  %ebp,0x3a(%ebp,%eiz,2)
 343:	74 28                	je     36d <.stabstr+0x36d>
 345:	30 2c 31             	xor    %ch,(%ecx,%esi,1)
		hex_digits[num++]=hex_set[digit];
 348:	35 29 3d 72 28       	xor    $0x28723d29,%eax
 34d:	30 2c 31             	xor    %ch,(%ecx,%esi,1)
 350:	29 3b                	sub    %edi,(%ebx)
 352:	38 3b                	cmp    %bh,(%ebx)
 354:	30 3b                	xor    %bh,(%ebx)
 356:	00 6c 6f 6e          	add    %ch,0x6e(%edi,%ebp,2)
 35a:	67 20 64 6f          	and    %ah,0x6f(%si)
 35e:	75 62                	jne    3c2 <.stabstr+0x3c2>
 360:	6c                   	insb   (%dx),%es:(%edi)
 361:	65 3a 74 28 30       	cmp    %gs:0x30(%eax,%ebp,1),%dh
	{
		console_putc_color('0',back,fore);
		return;
	}

	while(n)				//循环，每次去除最低位放在hex_digits里边，并且让n除以16
 366:	2c 31                	sub    $0x31,%al
 368:	36 29 3d 72 28 30 2c 	sub    %edi,%ss:0x2c302872
		char digit=n & (0xf);
		hex_digits[num++]=hex_set[digit];
		n=n>>4;
	}
	uint8_t i,j;
	for(i=0,j=num-1;i<num;i++,j--)
 36f:	31 29                	xor    %ebp,(%ecx)
 371:	3b 31                	cmp    (%ecx),%esi
 373:	32 3b                	xor    (%ebx),%bh
 375:	30 3b                	xor    %bh,(%ebx)
 377:	00 5f 44             	add    %bl,0x44(%edi)
 37a:	65 63 69 6d          	arpl   %bp,%gs:0x6d(%ecx)
	{
		result[i]=hex_digits[j];
 37e:	61                   	popa   
 37f:	6c                   	insb   (%dx),%es:(%edi)
 380:	33 32                	xor    (%edx),%esi
 382:	3a 74 28 30          	cmp    0x30(%eax,%ebp,1),%dh
 386:	2c 31                	sub    $0x31,%al
 388:	37                   	aaa    
 389:	29 3d 72 28 30 2c    	sub    %edi,0x2c302872
		char digit=n & (0xf);
		hex_digits[num++]=hex_set[digit];
		n=n>>4;
	}
	uint8_t i,j;
	for(i=0,j=num-1;i<num;i++,j--)
 38f:	31 29                	xor    %ebp,(%ecx)
 391:	3b 34 3b             	cmp    (%ebx,%edi,1),%esi
 394:	30 3b                	xor    %bh,(%ebx)
 396:	00 5f 44             	add    %bl,0x44(%edi)
 399:	65 63 69 6d          	arpl   %bp,%gs:0x6d(%ecx)
 39d:	61                   	popa   
 39e:	6c                   	insb   (%dx),%es:(%edi)
 39f:	36 34 3a             	ss xor $0x3a,%al
 3a2:	74 28                	je     3cc <.stabstr+0x3cc>
 3a4:	30 2c 31             	xor    %ch,(%ecx,%esi,1)
 3a7:	38 29                	cmp    %ch,(%ecx)
 3a9:	3d 72 28 30 2c       	cmp    $0x2c302872,%eax
	{
		result[i]=hex_digits[j];
	}
	result[num]=0;
 3ae:	31 29                	xor    %ebp,(%ecx)
 3b0:	3b 38                	cmp    (%eax),%edi
 3b2:	3b 30                	cmp    (%eax),%esi
	console_write_color(result,back,fore);
 3b4:	3b 00                	cmp    (%eax),%eax
 3b6:	5f                   	pop    %edi
 3b7:	44                   	inc    %esp
 3b8:	65 63 69 6d          	arpl   %bp,%gs:0x6d(%ecx)
 3bc:	61                   	popa   
 3bd:	6c                   	insb   (%dx),%es:(%edi)
 3be:	31 32                	xor    %esi,(%edx)
 3c0:	38 3a                	cmp    %bh,(%edx)
 3c2:	74 28                	je     3ec <.stabstr+0x3ec>
 3c4:	30 2c 31             	xor    %ch,(%ecx,%esi,1)
 3c7:	39 29                	cmp    %ebp,(%ecx)
}
 3c9:	3d 72 28 30 2c       	cmp    $0x2c302872,%eax

void console_write_dec(uint32_t n, real_color_t back, real_color_t fore)
{
 3ce:	31 29                	xor    %ebp,(%ecx)
	//32位数用10进制输出最多10位
	char dec_digits[10];		//存放10进制数的每一位，低位在前，高位在后；
	char result[10];			//存放最终结果，高位在前，低位在后
	uint8_t num=0;				//表示该数有几位（10进制）
 3d0:	3b 31                	cmp    (%ecx),%esi
 3d2:	36 3b 30             	cmp    %ss:(%eax),%esi

	if(n==0)				//如果是0直接输出0
 3d5:	3b 00                	cmp    (%eax),%eax
 3d7:	76 6f                	jbe    448 <.stabstr+0x448>
 3d9:	69 64 3a 74 28 30 2c 	imul   $0x322c3028,0x74(%edx,%edi,1),%esp
 3e0:	32 
	{
		console_putc_color('0',back,fore);
 3e1:	30 29                	xor    %ch,(%ecx)
 3e3:	3d 28 30 2c 32       	cmp    $0x322c3028,%eax
 3e8:	30 29                	xor    %ch,(%ecx)
 3ea:	00 69 6e             	add    %ch,0x6e(%ecx)
 3ed:	63 6c 75 64          	arpl   %bp,0x64(%ebp,%esi,2)
 3f1:	65 2f                	gs das 
		return;
	}

	while(n)				//循环，每次去除最低位放在dec_digits里边，并且让n除以10
	{
		char digit=n%10;
 3f3:	63 6f 6d             	arpl   %bp,0x6d(%edi)
 3f6:	6d                   	insl   (%dx),%es:(%edi)
 3f7:	6f                   	outsl  %ds:(%esi),(%dx)
 3f8:	6e                   	outsb  %ds:(%esi),(%dx)
 3f9:	2e 68 00 69 6e 63    	cs push $0x636e6900
 3ff:	6c                   	insb   (%dx),%es:(%edi)
 400:	75 64                	jne    466 <.stabstr+0x466>
 402:	65 2f                	gs das 
 404:	74 79                	je     47f <.stabstr+0x47f>
 406:	70 65                	jo     46d <.stabstr+0x46d>
 408:	73 2e                	jae    438 <.stabstr+0x438>
 40a:	68 00 75 69 6e       	push   $0x6e697500
 40f:	74 33                	je     444 <.stabstr+0x444>
		dec_digits[num++]=dec_set[digit];
 411:	32 5f 74             	xor    0x74(%edi),%bl
 414:	3a 74 28 32          	cmp    0x32(%eax,%ebp,1),%dh
 418:	2c 31                	sub    $0x31,%al
 41a:	29 3d 28 30 2c 34    	sub    %edi,0x342c3028
 420:	29 00                	sub    %eax,(%eax)
 422:	69 6e 74 33 32 5f 74 	imul   $0x745f3233,0x74(%esi),%ebp
 429:	3a 74 28 32          	cmp    0x32(%eax,%ebp,1),%dh
		n/=10;
 42d:	2c 32                	sub    $0x32,%al
 42f:	29 3d 28 30 2c 31    	sub    %edi,0x312c3028
 435:	29 00                	sub    %eax,(%eax)
 437:	75 69                	jne    4a2 <.stabstr+0x4a2>
 439:	6e                   	outsb  %ds:(%esi),(%dx)
 43a:	74 31                	je     46d <.stabstr+0x46d>
 43c:	36 5f                	ss pop %edi
 43e:	74 3a                	je     47a <.stabstr+0x47a>
	{
		console_putc_color('0',back,fore);
		return;
	}

	while(n)				//循环，每次去除最低位放在dec_digits里边，并且让n除以10
 440:	74 28                	je     46a <.stabstr+0x46a>
 442:	32 2c 33             	xor    (%ebx,%esi,1),%ch
		char digit=n%10;
		dec_digits[num++]=dec_set[digit];
		n/=10;
	}
	uint8_t i,j;
	for(i=0,j=num-1;i<num;i++,j--)
 445:	29 3d 28 30 2c 31    	sub    %edi,0x312c3028
 44b:	31 29                	xor    %ebp,(%ecx)
 44d:	00 69 6e             	add    %ch,0x6e(%ecx)
 450:	74 31                	je     483 <.stabstr+0x483>
 452:	36 5f                	ss pop %edi
 454:	74 3a                	je     490 <.stabstr+0x490>
	{
		result[i]=dec_digits[j];
 456:	74 28                	je     480 <.stabstr+0x480>
 458:	32 2c 34             	xor    (%esp,%esi,1),%ch
 45b:	29 3d 28 30 2c 31    	sub    %edi,0x312c3028
 461:	30 29                	xor    %ch,(%ecx)
 463:	00 75 69             	add    %dh,0x69(%ebp)
		char digit=n%10;
		dec_digits[num++]=dec_set[digit];
		n/=10;
	}
	uint8_t i,j;
	for(i=0,j=num-1;i<num;i++,j--)
 466:	6e                   	outsb  %ds:(%esi),(%dx)
 467:	74 38                	je     4a1 <.stabstr+0x4a1>
 469:	5f                   	pop    %edi
 46a:	74 3a                	je     4a6 <.stabstr+0x4a6>
 46c:	74 28                	je     496 <.stabstr+0x496>
 46e:	32 2c 35 29 3d 28 30 	xor    0x30283d29(,%esi,1),%ch
 475:	2c 31                	sub    $0x31,%al
 477:	33 29                	xor    (%ecx),%ebp
 479:	00 69 6e             	add    %ch,0x6e(%ecx)
 47c:	74 38                	je     4b6 <.stabstr+0x4b6>
 47e:	5f                   	pop    %edi
 47f:	74 3a                	je     4bb <.stabstr+0x4bb>
 481:	74 28                	je     4ab <.stabstr+0x4ab>
	{
		result[i]=dec_digits[j];
	}
	result[num]=0;
 483:	32 2c 36             	xor    (%esi,%esi,1),%ch
 486:	29 3d 28 30 2c 32    	sub    %edi,0x322c3028
	console_write_color(result,back,fore);
 48c:	29 00                	sub    %eax,(%eax)
 48e:	70 69                	jo     4f9 <.stabstr+0x4f9>
 490:	64 5f                	fs pop %edi
 492:	74 3a                	je     4ce <.stabstr+0x4ce>
 494:	74 28                	je     4be <.stabstr+0x4be>
 496:	32 2c 37             	xor    (%edi,%esi,1),%ch
 499:	29 3d 28 32 2c 32    	sub    %edi,0x322c3228
 49f:	29 00                	sub    %eax,(%eax)
 4a1:	69 6e 63 6c 75 64 65 	imul   $0x6564756c,0x63(%esi),%ebp
 4a8:	2f                   	das    
 4a9:	63 6f 6e             	arpl   %bp,0x6e(%edi)
 4ac:	73 6f                	jae    51d <.stabstr+0x51d>
 4ae:	6c                   	insb   (%dx),%es:(%edi)
 4af:	65 2e 68 00 72 65 61 	gs cs push $0x61657200
 4b6:	6c                   	insb   (%dx),%es:(%edi)
 4b7:	5f                   	pop    %edi
 4b8:	63 6f 6c             	arpl   %bp,0x6c(%edi)
 4bb:	6f                   	outsl  %ds:(%esi),(%dx)
 4bc:	72 3a                	jb     4f8 <.stabstr+0x4f8>
 4be:	54                   	push   %esp
 4bf:	28 33                	sub    %dh,(%ebx)
 4c1:	2c 31                	sub    $0x31,%al
 4c3:	29 3d 65 72 63 5f    	sub    %edi,0x5f637265
 4c9:	62 6c 61 63          	bound  %ebp,0x63(%ecx,%eiz,2)
 4cd:	6b 3a 30             	imul   $0x30,(%edx),%edi
 4d0:	2c 72                	sub    $0x72,%al
 4d2:	63 5f 62             	arpl   %bx,0x62(%edi)
 4d5:	6c                   	insb   (%dx),%es:(%edi)
 4d6:	75 65                	jne    53d <.stabstr+0x53d>
 4d8:	3a 31                	cmp    (%ecx),%dh
 4da:	2c 72                	sub    $0x72,%al
 4dc:	63 5f 67             	arpl   %bx,0x67(%edi)
 4df:	72 65                	jb     546 <.stabstr+0x546>
 4e1:	65 6e                	outsb  %gs:(%esi),(%dx)
 4e3:	3a 32                	cmp    (%edx),%dh
 4e5:	2c 72                	sub    $0x72,%al
 4e7:	63 5f 63             	arpl   %bx,0x63(%edi)
 4ea:	79 61                	jns    54d <.stabstr+0x54d>
 4ec:	6e                   	outsb  %ds:(%esi),(%dx)
 4ed:	3a 33                	cmp    (%ebx),%dh
 4ef:	2c 72                	sub    $0x72,%al
 4f1:	63 5f 72             	arpl   %bx,0x72(%edi)
 4f4:	65 64 3a 34 2c       	gs cmp %fs:(%esp,%ebp,1),%dh
 4f9:	72 63                	jb     55e <.stabstr+0x55e>
 4fb:	5f                   	pop    %edi
 4fc:	6d                   	insl   (%dx),%es:(%edi)
 4fd:	61                   	popa   
 4fe:	67 65 6e             	outsb  %gs:(%si),(%dx)
 501:	74 61                	je     564 <.stabstr+0x564>
 503:	3a 35 2c 72 63 5f    	cmp    0x5f63722c,%dh
 509:	62 72 6f             	bound  %esi,0x6f(%edx)
 50c:	77 6e                	ja     57c <.stabstr+0x57c>
 50e:	3a 36                	cmp    (%esi),%dh
 510:	2c 72                	sub    $0x72,%al
 512:	63 5f 6c             	arpl   %bx,0x6c(%edi)
 515:	69 67 68 74 5f 67 72 	imul   $0x72675f74,0x68(%edi),%esp
 51c:	65 79 3a             	gs jns 559 <.stabstr+0x559>
 51f:	37                   	aaa    
 520:	2c 72                	sub    $0x72,%al
 522:	63 5f 64             	arpl   %bx,0x64(%edi)
 525:	61                   	popa   
 526:	72 6b                	jb     593 <.stabstr+0x593>
 528:	5f                   	pop    %edi
 529:	67 72 65             	addr16 jb 591 <.stabstr+0x591>
 52c:	79 3a                	jns    568 <.stabstr+0x568>
 52e:	38 2c 72             	cmp    %ch,(%edx,%esi,2)
 531:	63 5f 6c             	arpl   %bx,0x6c(%edi)
 534:	69 67 68 74 5f 62 6c 	imul   $0x6c625f74,0x68(%edi),%esp
 53b:	75 65                	jne    5a2 <.stabstr+0x5a2>
 53d:	3a 39                	cmp    (%ecx),%bh
 53f:	2c 72                	sub    $0x72,%al
 541:	63 5f 6c             	arpl   %bx,0x6c(%edi)
 544:	69 67 68 74 5f 67 72 	imul   $0x72675f74,0x68(%edi),%esp
 54b:	65 65 6e             	gs outsb %gs:(%esi),(%dx)
 54e:	3a 31                	cmp    (%ecx),%dh
 550:	30 2c 72             	xor    %ch,(%edx,%esi,2)
 553:	63 5f 6c             	arpl   %bx,0x6c(%edi)
 556:	69 67 68 74 5f 63 79 	imul   $0x79635f74,0x68(%edi),%esp
 55d:	61                   	popa   
 55e:	6e                   	outsb  %ds:(%esi),(%dx)
 55f:	3a 31                	cmp    (%ecx),%dh
 561:	31 2c 72             	xor    %ebp,(%edx,%esi,2)
 564:	63 5f 6c             	arpl   %bx,0x6c(%edi)
 567:	69 67 68 74 5f 72 65 	imul   $0x65725f74,0x68(%edi),%esp
 56e:	64 3a 31             	cmp    %fs:(%ecx),%dh
 571:	32 2c 72             	xor    (%edx,%esi,2),%ch
 574:	63 5f 6c             	arpl   %bx,0x6c(%edi)
 577:	69 67 68 74 5f 6d 61 	imul   $0x616d5f74,0x68(%edi),%esp
 57e:	67 65 6e             	outsb  %gs:(%si),(%dx)
 581:	74 61                	je     5e4 <.stabstr+0x5e4>
 583:	3a 31                	cmp    (%ecx),%dh
 585:	33 2c 72             	xor    (%edx,%esi,2),%ebp
 588:	63 5f 79             	arpl   %bx,0x79(%edi)
 58b:	65 6c                	gs insb (%dx),%es:(%edi)
 58d:	6c                   	insb   (%dx),%es:(%edi)
 58e:	6f                   	outsl  %ds:(%esi),(%dx)
 58f:	77 3a                	ja     5cb <.stabstr+0x5cb>
 591:	31 34 2c             	xor    %esi,(%esp,%ebp,1)
 594:	72 63                	jb     5f9 <.stabstr+0x5f9>
 596:	5f                   	pop    %edi
 597:	77 68                	ja     601 <.stabstr+0x601>
 599:	69 74 65 3a 31 35 2c 	imul   $0x3b2c3531,0x3a(%ebp,%eiz,2),%esi
 5a0:	3b 
 5a1:	00 72 65             	add    %dh,0x65(%edx)
 5a4:	61                   	popa   
 5a5:	6c                   	insb   (%dx),%es:(%edi)
 5a6:	5f                   	pop    %edi
 5a7:	63 6f 6c             	arpl   %bp,0x6c(%edi)
 5aa:	6f                   	outsl  %ds:(%esi),(%dx)
 5ab:	72 5f                	jb     60c <.stabstr+0x60c>
 5ad:	74 3a                	je     5e9 <.stabstr+0x5e9>
 5af:	74 28                	je     5d9 <.stabstr+0x5d9>
 5b1:	33 2c 32             	xor    (%edx,%esi,1),%ebp
 5b4:	29 3d 28 33 2c 31    	sub    %edi,0x312c3328
 5ba:	29 00                	sub    %eax,(%eax)
 5bc:	6d                   	insl   (%dx),%es:(%edi)
 5bd:	6f                   	outsl  %ds:(%esi),(%dx)
 5be:	76 65                	jbe    625 <.stabstr+0x625>
 5c0:	5f                   	pop    %edi
 5c1:	63 75 72             	arpl   %si,0x72(%ebp)
 5c4:	73 6f                	jae    635 <.stabstr+0x635>
 5c6:	72 3a                	jb     602 <.stabstr+0x602>
 5c8:	66 28 30             	data16 sub %dh,(%eax)
 5cb:	2c 32                	sub    $0x32,%al
 5cd:	30 29                	xor    %ch,(%ecx)
 5cf:	00 63 75             	add    %ah,0x75(%ebx)
 5d2:	72 73                	jb     647 <.stabstr+0x647>
 5d4:	6f                   	outsl  %ds:(%esi),(%dx)
 5d5:	72 4c                	jb     623 <.stabstr+0x623>
 5d7:	6f                   	outsl  %ds:(%esi),(%dx)
 5d8:	63 61 74             	arpl   %sp,0x74(%ecx)
 5db:	69 6f 6e 3a 28 32 2c 	imul   $0x2c32283a,0x6e(%edi),%ebp
 5e2:	33 29                	xor    (%ecx),%ebp
 5e4:	00 63 6f             	add    %ah,0x6f(%ebx)
 5e7:	6e                   	outsb  %ds:(%esi),(%dx)
 5e8:	73 6f                	jae    659 <.stabstr+0x659>
 5ea:	6c                   	insb   (%dx),%es:(%edi)
 5eb:	65 5f                	gs pop %edi
 5ed:	63 6c 65 61          	arpl   %bp,0x61(%ebp,%eiz,2)
 5f1:	72 3a                	jb     62d <.stabstr+0x62d>
 5f3:	46                   	inc    %esi
 5f4:	28 30                	sub    %dh,(%eax)
 5f6:	2c 32                	sub    $0x32,%al
 5f8:	30 29                	xor    %ch,(%ecx)
 5fa:	00 61 74             	add    %ah,0x74(%ecx)
 5fd:	74 72                	je     671 <.stabstr+0x671>
 5ff:	69 62 75 74 65 5f 62 	imul   $0x625f6574,0x75(%edx),%esp
 606:	79 74                	jns    67c <.stabstr+0x67c>
 608:	65 3a 28             	cmp    %gs:(%eax),%ch
 60b:	32 2c 35 29 00 62 6c 	xor    0x6c620029(,%esi,1),%ch
 612:	61                   	popa   
 613:	6e                   	outsb  %ds:(%esi),(%dx)
 614:	6b 3a 28             	imul   $0x28,(%edx),%edi
 617:	32 2c 33             	xor    (%ebx,%esi,1),%ch
 61a:	29 00                	sub    %eax,(%eax)
 61c:	69 3a 28 30 2c 31    	imul   $0x312c3028,(%edx),%edi
 622:	29 00                	sub    %eax,(%eax)
 624:	73 63                	jae    689 <.stabstr+0x689>
 626:	72 6f                	jb     697 <.stabstr+0x697>
 628:	6c                   	insb   (%dx),%es:(%edi)
 629:	6c                   	insb   (%dx),%es:(%edi)
 62a:	3a 66 28             	cmp    0x28(%esi),%ah
 62d:	30 2c 32             	xor    %ch,(%edx,%esi,1)
 630:	30 29                	xor    %ch,(%ecx)
 632:	00 61 74             	add    %ah,0x74(%ecx)
 635:	74 72                	je     6a9 <.stabstr+0x6a9>
 637:	69 62 75 74 65 5f 62 	imul   $0x625f6574,0x75(%edx),%esp
 63e:	79 74                	jns    6b4 <.stabstr+0x6b4>
 640:	65 3a 28             	cmp    %gs:(%eax),%ch
 643:	32 2c 35 29 00 62 6c 	xor    0x6c620029(,%esi,1),%ch
 64a:	61                   	popa   
 64b:	6e                   	outsb  %ds:(%esi),(%dx)
 64c:	6b 3a 28             	imul   $0x28,(%edx),%edi
 64f:	32 2c 33             	xor    (%ebx,%esi,1),%ch
 652:	29 00                	sub    %eax,(%eax)
 654:	69 3a 28 30 2c 31    	imul   $0x312c3028,(%edx),%edi
 65a:	29 00                	sub    %eax,(%eax)
 65c:	63 6f 6e             	arpl   %bp,0x6e(%edi)
 65f:	73 6f                	jae    6d0 <.stabstr+0x6d0>
 661:	6c                   	insb   (%dx),%es:(%edi)
 662:	65 5f                	gs pop %edi
 664:	70 75                	jo     6db <.stabstr+0x6db>
 666:	74 63                	je     6cb <.stabstr+0x6cb>
 668:	5f                   	pop    %edi
 669:	63 6f 6c             	arpl   %bp,0x6c(%edi)
 66c:	6f                   	outsl  %ds:(%esi),(%dx)
 66d:	72 3a                	jb     6a9 <.stabstr+0x6a9>
 66f:	46                   	inc    %esi
 670:	28 30                	sub    %dh,(%eax)
 672:	2c 32                	sub    $0x32,%al
 674:	30 29                	xor    %ch,(%ecx)
 676:	00 63 3a             	add    %ah,0x3a(%ebx)
 679:	70 28                	jo     6a3 <.stabstr+0x6a3>
 67b:	30 2c 31             	xor    %ch,(%ecx,%esi,1)
 67e:	29 00                	sub    %eax,(%eax)
 680:	62 61 63             	bound  %esp,0x63(%ecx)
 683:	6b 3a 70             	imul   $0x70,(%edx),%edi
 686:	28 33                	sub    %dh,(%ebx)
 688:	2c 32                	sub    $0x32,%al
 68a:	29 00                	sub    %eax,(%eax)
 68c:	66 6f                	outsw  %ds:(%esi),(%dx)
 68e:	72 65                	jb     6f5 <.stabstr+0x6f5>
 690:	3a 70 28             	cmp    0x28(%eax),%dh
 693:	33 2c 32             	xor    (%edx,%esi,1),%ebp
 696:	29 00                	sub    %eax,(%eax)
 698:	62 61 63             	bound  %esp,0x63(%ecx)
 69b:	6b 5f 63 6f          	imul   $0x6f,0x63(%edi),%ebx
 69f:	6c                   	insb   (%dx),%es:(%edi)
 6a0:	6f                   	outsl  %ds:(%esi),(%dx)
 6a1:	72 3a                	jb     6dd <.stabstr+0x6dd>
 6a3:	28 32                	sub    %dh,(%edx)
 6a5:	2c 35                	sub    $0x35,%al
 6a7:	29 00                	sub    %eax,(%eax)
 6a9:	66 6f                	outsw  %ds:(%esi),(%dx)
 6ab:	72 65                	jb     712 <.stabstr+0x712>
 6ad:	5f                   	pop    %edi
 6ae:	63 6f 6c             	arpl   %bp,0x6c(%edi)
 6b1:	6f                   	outsl  %ds:(%esi),(%dx)
 6b2:	72 3a                	jb     6ee <.stabstr+0x6ee>
 6b4:	28 32                	sub    %dh,(%edx)
 6b6:	2c 35                	sub    $0x35,%al
 6b8:	29 00                	sub    %eax,(%eax)
 6ba:	61                   	popa   
 6bb:	74 74                	je     731 <.stabstr+0x731>
 6bd:	72 69                	jb     728 <.stabstr+0x728>
 6bf:	62 75 74             	bound  %esi,0x74(%ebp)
 6c2:	65 5f                	gs pop %edi
 6c4:	62 79 74             	bound  %edi,0x74(%ecx)
 6c7:	65 3a 28             	cmp    %gs:(%eax),%ch
 6ca:	32 2c 35 29 00 61 74 	xor    0x74610029(,%esi,1),%ch
 6d1:	74 72                	je     745 <.stabstr+0x745>
 6d3:	69 62 75 74 65 3a 28 	imul   $0x283a6574,0x75(%edx),%esp
 6da:	32 2c 33             	xor    (%ebx,%esi,1),%ch
 6dd:	29 00                	sub    %eax,(%eax)
 6df:	63 3a                	arpl   %di,(%edx)
 6e1:	28 30                	sub    %dh,(%eax)
 6e3:	2c 32                	sub    $0x32,%al
 6e5:	29 00                	sub    %eax,(%eax)
 6e7:	63 6f 6e             	arpl   %bp,0x6e(%edi)
 6ea:	73 6f                	jae    75b <.stabstr+0x75b>
 6ec:	6c                   	insb   (%dx),%es:(%edi)
 6ed:	65 5f                	gs pop %edi
 6ef:	77 72                	ja     763 <.stabstr+0x763>
 6f1:	69 74 65 3a 46 28 30 	imul   $0x2c302846,0x3a(%ebp,%eiz,2),%esi
 6f8:	2c 
 6f9:	32 30                	xor    (%eax),%dh
 6fb:	29 00                	sub    %eax,(%eax)
 6fd:	63 73 74             	arpl   %si,0x74(%ebx)
 700:	72 3a                	jb     73c <.stabstr+0x73c>
 702:	70 28                	jo     72c <.stabstr+0x72c>
 704:	30 2c 32             	xor    %ch,(%edx,%esi,1)
 707:	31 29                	xor    %ebp,(%ecx)
 709:	3d 2a 28 30 2c       	cmp    $0x2c30282a,%eax
 70e:	32 29                	xor    (%ecx),%ch
 710:	00 63 6f             	add    %ah,0x6f(%ebx)
 713:	6e                   	outsb  %ds:(%esi),(%dx)
 714:	73 6f                	jae    785 <.stabstr+0x785>
 716:	6c                   	insb   (%dx),%es:(%edi)
 717:	65 5f                	gs pop %edi
 719:	77 72                	ja     78d <.stabstr+0x78d>
 71b:	69 74 65 5f 63 6f 6c 	imul   $0x6f6c6f63,0x5f(%ebp,%eiz,2),%esi
 722:	6f 
 723:	72 3a                	jb     75f <.stabstr+0x75f>
 725:	46                   	inc    %esi
 726:	28 30                	sub    %dh,(%eax)
 728:	2c 32                	sub    $0x32,%al
 72a:	30 29                	xor    %ch,(%ecx)
 72c:	00 63 73             	add    %ah,0x73(%ebx)
 72f:	74 72                	je     7a3 <.stabstr+0x7a3>
 731:	3a 70 28             	cmp    0x28(%eax),%dh
 734:	30 2c 32             	xor    %ch,(%edx,%esi,1)
 737:	31 29                	xor    %ebp,(%ecx)
 739:	00 62 61             	add    %ah,0x61(%edx)
 73c:	63 6b 3a             	arpl   %bp,0x3a(%ebx)
 73f:	70 28                	jo     769 <.stabstr+0x769>
 741:	33 2c 32             	xor    (%edx,%esi,1),%ebp
 744:	29 00                	sub    %eax,(%eax)
 746:	66 6f                	outsw  %ds:(%esi),(%dx)
 748:	72 65                	jb     7af <.stabstr+0x7af>
 74a:	3a 70 28             	cmp    0x28(%eax),%dh
 74d:	33 2c 32             	xor    (%edx,%esi,1),%ebp
 750:	29 00                	sub    %eax,(%eax)
 752:	63 6f 6e             	arpl   %bp,0x6e(%edi)
 755:	73 6f                	jae    7c6 <.stabstr+0x7c6>
 757:	6c                   	insb   (%dx),%es:(%edi)
 758:	65 5f                	gs pop %edi
 75a:	77 72                	ja     7ce <.stabstr+0x7ce>
 75c:	69 74 65 5f 68 65 78 	imul   $0x3a786568,0x5f(%ebp,%eiz,2),%esi
 763:	3a 
 764:	46                   	inc    %esi
 765:	28 30                	sub    %dh,(%eax)
 767:	2c 32                	sub    $0x32,%al
 769:	30 29                	xor    %ch,(%ecx)
 76b:	00 6e 3a             	add    %ch,0x3a(%esi)
 76e:	70 28                	jo     798 <.stabstr+0x798>
 770:	32 2c 31             	xor    (%ecx,%esi,1),%ch
 773:	29 00                	sub    %eax,(%eax)
 775:	62 61 63             	bound  %esp,0x63(%ecx)
 778:	6b 3a 70             	imul   $0x70,(%edx),%edi
 77b:	28 33                	sub    %dh,(%ebx)
 77d:	2c 32                	sub    $0x32,%al
 77f:	29 00                	sub    %eax,(%eax)
 781:	66 6f                	outsw  %ds:(%esi),(%dx)
 783:	72 65                	jb     7ea <.stabstr+0x7ea>
 785:	3a 70 28             	cmp    0x28(%eax),%dh
 788:	33 2c 32             	xor    (%edx,%esi,1),%ebp
 78b:	29 00                	sub    %eax,(%eax)
 78d:	68 65 78 5f 68       	push   $0x685f7865
 792:	65 61                	gs popa 
 794:	64 65 72 3a          	fs gs jb 7d2 <.stabstr+0x7d2>
 798:	28 30                	sub    %dh,(%eax)
 79a:	2c 32                	sub    $0x32,%al
 79c:	32 29                	xor    (%ecx),%ch
 79e:	3d 61 72 28 30       	cmp    $0x30287261,%eax
 7a3:	2c 32                	sub    $0x32,%al
 7a5:	33 29                	xor    (%ecx),%ebp
 7a7:	3d 72 28 30 2c       	cmp    $0x2c302872,%eax
 7ac:	32 33                	xor    (%ebx),%dh
 7ae:	29 3b                	sub    %edi,(%ebx)
 7b0:	30 3b                	xor    %bh,(%ebx)
 7b2:	30 33                	xor    %dh,(%ebx)
 7b4:	37                   	aaa    
 7b5:	37                   	aaa    
 7b6:	37                   	aaa    
 7b7:	37                   	aaa    
 7b8:	37                   	aaa    
 7b9:	37                   	aaa    
 7ba:	37                   	aaa    
 7bb:	37                   	aaa    
 7bc:	37                   	aaa    
 7bd:	37                   	aaa    
 7be:	3b 3b                	cmp    (%ebx),%edi
 7c0:	30 3b                	xor    %bh,(%ebx)
 7c2:	32 3b                	xor    (%ebx),%bh
 7c4:	28 30                	sub    %dh,(%eax)
 7c6:	2c 32                	sub    $0x32,%al
 7c8:	29 00                	sub    %eax,(%eax)
 7ca:	68 65 78 5f 64       	push   $0x645f7865
 7cf:	69 67 69 74 73 3a 28 	imul   $0x283a7374,0x69(%edi),%esp
 7d6:	30 2c 32             	xor    %ch,(%edx,%esi,1)
 7d9:	34 29                	xor    $0x29,%al
 7db:	3d 61 72 28 30       	cmp    $0x30287261,%eax
 7e0:	2c 32                	sub    $0x32,%al
 7e2:	33 29                	xor    (%ecx),%ebp
 7e4:	3b 30                	cmp    (%eax),%esi
 7e6:	3b 37                	cmp    (%edi),%esi
 7e8:	3b 28                	cmp    (%eax),%ebp
 7ea:	30 2c 32             	xor    %ch,(%edx,%esi,1)
 7ed:	29 00                	sub    %eax,(%eax)
 7ef:	72 65                	jb     856 <.stabstr+0x856>
 7f1:	73 75                	jae    868 <.stabstr+0x868>
 7f3:	6c                   	insb   (%dx),%es:(%edi)
 7f4:	74 3a                	je     830 <.stabstr+0x830>
 7f6:	28 30                	sub    %dh,(%eax)
 7f8:	2c 32                	sub    $0x32,%al
 7fa:	34 29                	xor    $0x29,%al
 7fc:	00 6e 75             	add    %ch,0x75(%esi)
 7ff:	6d                   	insl   (%dx),%es:(%edi)
 800:	3a 28                	cmp    (%eax),%ch
 802:	32 2c 35 29 00 69 3a 	xor    0x3a690029(,%esi,1),%ch
 809:	28 32                	sub    %dh,(%edx)
 80b:	2c 35                	sub    $0x35,%al
 80d:	29 00                	sub    %eax,(%eax)
 80f:	6a 3a                	push   $0x3a
 811:	28 32                	sub    %dh,(%edx)
 813:	2c 35                	sub    $0x35,%al
 815:	29 00                	sub    %eax,(%eax)
 817:	64 69 67 69 74 3a 28 	imul   $0x30283a74,%fs:0x69(%edi),%esp
 81e:	30 
 81f:	2c 32                	sub    $0x32,%al
 821:	29 00                	sub    %eax,(%eax)
 823:	63 6f 6e             	arpl   %bp,0x6e(%edi)
 826:	73 6f                	jae    897 <.stabstr+0x897>
 828:	6c                   	insb   (%dx),%es:(%edi)
 829:	65 5f                	gs pop %edi
 82b:	77 72                	ja     89f <.stabstr+0x89f>
 82d:	69 74 65 5f 64 65 63 	imul   $0x3a636564,0x5f(%ebp,%eiz,2),%esi
 834:	3a 
 835:	46                   	inc    %esi
 836:	28 30                	sub    %dh,(%eax)
 838:	2c 32                	sub    $0x32,%al
 83a:	30 29                	xor    %ch,(%ecx)
 83c:	00 6e 3a             	add    %ch,0x3a(%esi)
 83f:	70 28                	jo     869 <.stabstr+0x869>
 841:	32 2c 31             	xor    (%ecx,%esi,1),%ch
 844:	29 00                	sub    %eax,(%eax)
 846:	62 61 63             	bound  %esp,0x63(%ecx)
 849:	6b 3a 70             	imul   $0x70,(%edx),%edi
 84c:	28 33                	sub    %dh,(%ebx)
 84e:	2c 32                	sub    $0x32,%al
 850:	29 00                	sub    %eax,(%eax)
 852:	66 6f                	outsw  %ds:(%esi),(%dx)
 854:	72 65                	jb     8bb <.stabstr+0x8bb>
 856:	3a 70 28             	cmp    0x28(%eax),%dh
 859:	33 2c 32             	xor    (%edx,%esi,1),%ebp
 85c:	29 00                	sub    %eax,(%eax)
 85e:	64 65 63 5f 64       	fs arpl %bx,%gs:0x64(%edi)
 863:	69 67 69 74 73 3a 28 	imul   $0x283a7374,0x69(%edi),%esp
 86a:	30 2c 32             	xor    %ch,(%edx,%esi,1)
 86d:	35 29 3d 61 72       	xor    $0x72613d29,%eax
 872:	28 30                	sub    %dh,(%eax)
 874:	2c 32                	sub    $0x32,%al
 876:	33 29                	xor    (%ecx),%ebp
 878:	3b 30                	cmp    (%eax),%esi
 87a:	3b 39                	cmp    (%ecx),%edi
 87c:	3b 28                	cmp    (%eax),%ebp
 87e:	30 2c 32             	xor    %ch,(%edx,%esi,1)
 881:	29 00                	sub    %eax,(%eax)
 883:	72 65                	jb     8ea <.stabstr+0x8ea>
 885:	73 75                	jae    8fc <.stabstr+0x8fc>
 887:	6c                   	insb   (%dx),%es:(%edi)
 888:	74 3a                	je     8c4 <.stabstr+0x8c4>
 88a:	28 30                	sub    %dh,(%eax)
 88c:	2c 32                	sub    $0x32,%al
 88e:	35 29 00 6e 75       	xor    $0x756e0029,%eax
 893:	6d                   	insl   (%dx),%es:(%edi)
 894:	3a 28                	cmp    (%eax),%ch
 896:	32 2c 35 29 00 69 3a 	xor    0x3a690029(,%esi,1),%ch
 89d:	28 32                	sub    %dh,(%edx)
 89f:	2c 35                	sub    $0x35,%al
 8a1:	29 00                	sub    %eax,(%eax)
 8a3:	6a 3a                	push   $0x3a
 8a5:	28 32                	sub    %dh,(%edx)
 8a7:	2c 35                	sub    $0x35,%al
 8a9:	29 00                	sub    %eax,(%eax)
 8ab:	64 69 67 69 74 3a 28 	imul   $0x30283a74,%fs:0x69(%edi),%esp
 8b2:	30 
 8b3:	2c 32                	sub    $0x32,%al
 8b5:	29 00                	sub    %eax,(%eax)
 8b7:	76 69                	jbe    922 <.stabstr+0x922>
 8b9:	64 65 6f             	fs outsl %gs:(%esi),(%dx)
 8bc:	5f                   	pop    %edi
 8bd:	6d                   	insl   (%dx),%es:(%edi)
 8be:	65 6d                	gs insl (%dx),%es:(%edi)
 8c0:	6f                   	outsl  %ds:(%esi),(%dx)
 8c1:	72 79                	jb     93c <console_write_dec+0x572>
 8c3:	3a 53 28             	cmp    0x28(%ebx),%dl
 8c6:	30 2c 32             	xor    %ch,(%edx,%esi,1)
 8c9:	36 29 3d 2a 28 32 2c 	sub    %edi,%ss:0x2c32282a
 8d0:	33 29                	xor    (%ecx),%ebp
 8d2:	00 63 75             	add    %ah,0x75(%ebx)
 8d5:	72 73                	jb     94a <console_write_dec+0x580>
 8d7:	6f                   	outsl  %ds:(%esi),(%dx)
 8d8:	72 5f                	jb     939 <.stabstr+0x939>
 8da:	78 3a                	js     916 <.stabstr+0x916>
 8dc:	53                   	push   %ebx
 8dd:	28 32                	sub    %dh,(%edx)
 8df:	2c 35                	sub    $0x35,%al
 8e1:	29 00                	sub    %eax,(%eax)
 8e3:	63 75 72             	arpl   %si,0x72(%ebp)
 8e6:	73 6f                	jae    957 <console_write_dec+0x58d>
 8e8:	72 5f                	jb     949 <console_write_dec+0x57f>
 8ea:	79 3a                	jns    926 <.stabstr+0x926>
 8ec:	53                   	push   %ebx
 8ed:	28 32                	sub    %dh,(%edx)
 8ef:	2c 35                	sub    $0x35,%al
 8f1:	29 00                	sub    %eax,(%eax)
 8f3:	68 65 78 5f 73       	push   $0x735f7865
 8f8:	65 74 3a             	gs je  935 <.stabstr+0x935>
 8fb:	53                   	push   %ebx
 8fc:	28 30                	sub    %dh,(%eax)
 8fe:	2c 32                	sub    $0x32,%al
 900:	37                   	aaa    
 901:	29 3d 61 72 28 30    	sub    %edi,0x30287261
 907:	2c 32                	sub    $0x32,%al
 909:	33 29                	xor    (%ecx),%ebp
 90b:	3b 30                	cmp    (%eax),%esi
 90d:	3b 31                	cmp    (%ecx),%esi
 90f:	36 3b 28             	cmp    %ss:(%eax),%ebp
 912:	32 2c 35 29 00 64 65 	xor    0x65640029(,%esi,1),%ch
 919:	63 5f 73             	arpl   %bx,0x73(%edi)
 91c:	65 74 3a             	gs je  959 <console_write_dec+0x58f>
 91f:	53                   	push   %ebx
 920:	28 30                	sub    %dh,(%eax)
 922:	2c 32                	sub    $0x32,%al
 924:	38 29                	cmp    %ch,(%ecx)
 926:	3d 61 72 28 30       	cmp    $0x30287261,%eax
 92b:	2c 32                	sub    $0x32,%al
 92d:	33 29                	xor    (%ecx),%ebp
 92f:	3b 30                	cmp    (%eax),%esi
 931:	3b 31                	cmp    (%ecx),%esi
 933:	30 3b                	xor    %bh,(%ebx)
 935:	28 32                	sub    %dh,(%edx)
 937:	2c 35                	sub    $0x35,%al
 939:	29 00                	sub    %eax,(%eax)

Disassembly of section .comment:

00000000 <.comment>:
static uint8_t hex_set[]="0123456789ABCDEF";
static uint8_t dec_set[]="0123456789";

//移动光标
static void move_cursor()
{
   0:	00 47 43             	add    %al,0x43(%edi)
   3:	43                   	inc    %ebx
   4:	3a 20                	cmp    (%eax),%ah
	//屏幕宽80高25,80*25
	uint16_t cursorLocation=cursor_y*80+cursor_x;
   6:	28 55 62             	sub    %dl,0x62(%ebp)
   9:	75 6e                	jne    79 <dec_set+0x61>
   b:	74 75                	je     82 <dec_set+0x6a>
   d:	20 35 2e 34 2e 30    	and    %dh,0x302e342e
  13:	2d 36 75 62 75       	sub    $0x75627536,%eax
  18:	6e                   	outsb  %ds:(%esi),(%dx)
  19:	74 75                	je     90 <console_clear+0x9>
  1b:	31 7e 31             	xor    %edi,0x31(%esi)
  1e:	36 2e 30 34 2e       	ss xor %dh,%cs:(%esi,%ebp,1)
  23:	31 30                	xor    %esi,(%eax)
  25:	29 20                	sub    %esp,(%eax)
  27:	35 2e 34 2e 30       	xor    $0x302e342e,%eax
	** 向它写入一个值来指定内部的某个寄存器
	** 光标寄存器的索引值分别是14和15,
	** 分别存储光标位置的高8位和低8位
	** 可以通过端口0x3d5对其内容进行读写
	*/
	outb(0x3d4,14);					//准备设置光标的高8位
  2c:	20 32                	and    %dh,(%edx)
  2e:	30 31                	xor    %dh,(%ecx)
  30:	36 30 36             	xor    %dh,%ss:(%esi)
  33:	30 39                	xor    %bh,(%ecx)
	...

Disassembly of section .eh_frame:

00000000 <.eh_frame>:
static uint8_t hex_set[]="0123456789ABCDEF";
static uint8_t dec_set[]="0123456789";

//移动光标
static void move_cursor()
{
   0:	14 00                	adc    $0x0,%al
   2:	00 00                	add    %al,(%eax)
   4:	00 00                	add    %al,(%eax)
	//屏幕宽80高25,80*25
	uint16_t cursorLocation=cursor_y*80+cursor_x;
   6:	00 00                	add    %al,(%eax)
   8:	01 7a 52             	add    %edi,0x52(%edx)
   b:	00 01                	add    %al,(%ecx)
   d:	7c 08                	jl     17 <.eh_frame+0x17>
   f:	01 1b                	add    %ebx,(%ebx)
  11:	0c 04                	or     $0x4,%al
  13:	04 88                	add    $0x88,%al
  15:	01 00                	add    %eax,(%eax)
  17:	00 1c 00             	add    %bl,(%eax,%eax,1)
  1a:	00 00                	add    %al,(%eax)
  1c:	1c 00                	sbb    $0x0,%al
  1e:	00 00                	add    %al,(%eax)
  20:	00 00                	add    %al,(%eax)
  22:	00 00                	add    %al,(%eax)
  24:	87 00                	xchg   %eax,(%eax)
  26:	00 00                	add    %al,(%eax)
  28:	00 41 0e             	add    %al,0xe(%ecx)
  2b:	08 85 02 42 0d 05    	or     %al,0x50d4202(%ebp)
	** 向它写入一个值来指定内部的某个寄存器
	** 光标寄存器的索引值分别是14和15,
	** 分别存储光标位置的高8位和低8位
	** 可以通过端口0x3d5对其内容进行读写
	*/
	outb(0x3d4,14);					//准备设置光标的高8位
  31:	02 83 c5 0c 04 04    	add    0x4040cc5(%ebx),%al
  37:	00 1c 00             	add    %bl,(%eax,%eax,1)
  3a:	00 00                	add    %al,(%eax)
  3c:	3c 00                	cmp    $0x0,%al
	outb(0x3d5,cursorLocation>>8);	//设置光标高8位
  3e:	00 00                	add    %al,(%eax)
  40:	87 00                	xchg   %eax,(%eax)
  42:	00 00                	add    %al,(%eax)
  44:	57                   	push   %edi
  45:	00 00                	add    %al,(%eax)
  47:	00 00                	add    %al,(%eax)
  49:	41                   	inc    %ecx
  4a:	0e                   	push   %cs
  4b:	08 85 02 42 0d 05    	or     %al,0x50d4202(%ebp)
  51:	02 53 c5             	add    -0x3b(%ebx),%dl
  54:	0c 04                	or     $0x4,%al
  56:	04 00                	add    $0x0,%al
  58:	1c 00                	sbb    $0x0,%al
	outb(0x3d4,15);					//准备设置光标的低8位
  5a:	00 00                	add    %al,(%eax)
  5c:	5c                   	pop    %esp
  5d:	00 00                	add    %al,(%eax)
  5f:	00 de                	add    %bl,%dh
  61:	00 00                	add    %al,(%eax)
  63:	00 8d 00 00 00 00    	add    %cl,0x0(%ebp)
  69:	41                   	inc    %ecx
  6a:	0e                   	push   %cs
  6b:	08 85 02 42 0d 05    	or     %al,0x50d4202(%ebp)
	outb(0x3d5,cursorLocation);		//设置光标低8位
  71:	02 89 c5 0c 04 04    	add    0x4040cc5(%ecx),%cl
  77:	00 1c 00             	add    %bl,(%eax,%eax,1)
  7a:	00 00                	add    %al,(%eax)
  7c:	7c 00                	jl     7e <.eh_frame+0x7e>
  7e:	00 00                	add    %al,(%eax)
  80:	6b 01 00             	imul   $0x0,(%ecx),%eax
  83:	00 21                	add    %ah,(%ecx)
}
  85:	01 00                	add    %eax,(%eax)

//清屏
void console_clear()
{
  87:	00 00                	add    %al,(%eax)
  89:	41                   	inc    %ecx
  8a:	0e                   	push   %cs
  8b:	08 85 02 42 0d 05    	or     %al,0x50d4202(%ebp)
	uint8_t attribute_byte=0x07; //黑底白字
	uint16_t blank=0x20 | (attribute_byte << 8); //一个字，表示黑底白字的空格，用来清屏
  91:	03 1d 01 c5 0c 04    	add    0x40cc501,%ebx
  97:	04 1c                	add    $0x1c,%al
  99:	00 00                	add    %al,(%eax)
  9b:	00 9c 00 00 00 8c 02 	add    %bl,0x28c0000(%eax,%eax,1)
	
	int i;
	for (i=0;i<80*25;i++)
  a2:	00 00                	add    %al,(%eax)
  a4:	34 00                	xor    $0x0,%al
  a6:	00 00                	add    %al,(%eax)
	{
		video_memory[i]=blank;
  a8:	00 41 0e             	add    %al,0xe(%ecx)
  ab:	08 85 02 42 0d 05    	or     %al,0x50d4202(%ebp)
  b1:	70 c5                	jo     78 <.eh_frame+0x78>
  b3:	0c 04                	or     $0x4,%al
  b5:	04 00                	add    $0x0,%al
  b7:	00 1c 00             	add    %bl,(%eax,%eax,1)
  ba:	00 00                	add    %al,(%eax)
{
	uint8_t attribute_byte=0x07; //黑底白字
	uint16_t blank=0x20 | (attribute_byte << 8); //一个字，表示黑底白字的空格，用来清屏
	
	int i;
	for (i=0;i<80*25;i++)
  bc:	bc 00 00 00 c0       	mov    $0xc0000000,%esp
  c1:	02 00                	add    (%eax),%al
  c3:	00 36                	add    %dh,(%esi)
  c5:	00 00                	add    %al,(%eax)
  c7:	00 00                	add    %al,(%eax)
	{
		video_memory[i]=blank;
	}

	cursor_x=0;
  c9:	41                   	inc    %ecx
  ca:	0e                   	push   %cs
  cb:	08 85 02 42 0d 05    	or     %al,0x50d4202(%ebp)
	cursor_y=0;
  d1:	72 c5                	jb     98 <.eh_frame+0x98>
  d3:	0c 04                	or     $0x4,%al
  d5:	04 00                	add    $0x0,%al
	move_cursor();
  d7:	00 1c 00             	add    %bl,(%eax,%eax,1)
  da:	00 00                	add    %al,(%eax)
}
  dc:	dc 00                	faddl  (%eax)

//滚屏
static void scroll()
{
  de:	00 00                	add    %al,(%eax)
  e0:	f6 02 00             	testb  $0x0,(%edx)
  e3:	00 d4                	add    %dl,%ah
	/* 滚屏很简单，把前24行一次向前挪动一行
	** 最后一行用黑底白字的空格填充 */
	uint8_t attribute_byte=0x07;
  e5:	00 00                	add    %al,(%eax)
  e7:	00 00                	add    %al,(%eax)
	uint16_t blank=0x20 | (attribute_byte << 8);
  e9:	41                   	inc    %ecx
  ea:	0e                   	push   %cs
  eb:	08 85 02 42 0d 05    	or     %al,0x50d4202(%ebp)
  f1:	02 d0                	add    %al,%dl
  f3:	c5 0c 04             	lds    (%esp,%eax,1),%ecx

	//cursor_y超过或者等于25时候需要滚屏
	if(cursor_y>=25)
  f6:	04 00                	add    $0x0,%al
  f8:	1c 00                	sbb    $0x0,%al
  fa:	00 00                	add    %al,(%eax)
  fc:	fc                   	cld    
  fd:	00 00                	add    %al,(%eax)
  ff:	00 ca                	add    %cl,%dl
	{
		int i;
		//除了第一行的每一行往前一行覆盖
		for (i=0;i<24*80;i++)
 101:	03 00                	add    (%eax),%eax
 103:	00 d9                	add    %bl,%cl
 105:	00 00                	add    %al,(%eax)
 107:	00 00                	add    %al,(%eax)
 109:	41                   	inc    %ecx
		{
			video_memory[i]=video_memory[i+80];
 10a:	0e                   	push   %cs
 10b:	08 85 02 42 0d 05    	or     %al,0x50d4202(%ebp)
 111:	02 d5                	add    %ch,%dl
 113:	c5 0c 04             	lds    (%esp,%eax,1),%ecx
 116:	04 00                	add    $0x0,%al
